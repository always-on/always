<taskModel about="urn:always.wpi.edu:Activities"
           xmlns="http://ce.org/cea-2018">

  <!-- This model is loaded at startup to register all of the activities and
       their respective plugins.

       See Activities.properties for plugin information
  -->
                                
  <task id="GreetUser"/>

  <!-- These below will be presented to user in final menu in two columns in 
       the order listed here, followed by "What did you say?" 

       Unfortunately the top of second column will vary depending on the
       length of the list
  -->                
  
  <task id="ExplainSelf"/>

  <task id="DiscussWeather"/>

  <task id="PlayTicTacToe"/>

  <task id="PlayRummy"/>

  <task id="PlayCheckers">
    <precondition> isExplained("PLAY_GAMES") || notStranger() || days() &gt; 1 </precondition>
  </task>

  <task id="HearAnecdotes">
    <precondition> isExplained("HEAR_ANECDOTES") || notStranger() </precondition>
  </task>

  <task id="EnrollUser">
    <precondition> 
       Packages.edu.wpi.always.Always.THIS.getUserModel().getUserName().isEmpty()
       || notStranger() || days() &gt; 2
    </precondition>
  </task>

  <task id="TalkAbout">
    <precondition> 
      Packages.edu.wpi.always.enroll.EnrollPlugin.isPerformed() &amp;&amp;
        (isExplained("TALK_ABOUT") || notStranger() || days() &gt; 2)
    </precondition>
  </task>

  <task id="GetHealthTips">
    <precondition> notStranger() </precondition>
  </task>
  
  <task id="AdviseNutrition">
    <precondition> isExplained("ADVISE_NUTRITION") || notStranger() </precondition>
  </task>
  
  <task id="UseCalendar">
    <precondition> isExplained("USE_CALENDAR") || notStranger() || days() &gt; 3 </precondition>
  </task>

  <task id="PlanExercise">
    <precondition> advanced(7, "PLAN_EXERCISE") </precondition>
  </task>

  <task id="TellStory">
    <precondition> advanced(8, "TELL_STORY") </precondition>
  </task>

  <task id="UseSkype">
    <precondition> advanced(9, "USE_SKYPE") </precondition>
  </task>

  <task id="SayGoodbye"/>
  
  <script init="true">

    /*
     This element contains Javascript that is evaluated when this model
     is loaded.  This is convenient place to set parameters, etc., without
     changing source code.  Note that all Java classes and methods can
     be accessed from Javascript.  The variable edu.wpi.always.Always.THIS
     contains the most recent instance of the system.

     Note the 'eval' command in the Disco console window can be used
     similarly.
    */
  
    // note $always not initialized yet
    
    function notStranger () { 
      return Packages.edu.wpi.always.Always.THIS.getUserModel().getCloseness() != Packages.edu.wpi.always.Closeness.Stranger;
    }

    function advanced (min, property) {
      return Packages.edu.wpi.always.Always.THIS.getUserModel().getCloseness() == Packages.edu.wpi.always.Closeness.Companion
        || (notStranger() &amp;&amp; isExplained(property))
        || (notStranger() &amp;&amp; days() &gt; min &amp;&amp; sessions() &gt; days()/2);
    }

    function days () { 
      return Packages.edu.wpi.always.user.UserUtils.getDays(
        Packages.edu.wpi.always.Always.THIS.getUserModel());
    }

    function sessions () { 
      return Packages.edu.wpi.always.Always.THIS.getUserModel().getSessions();
    }

    function isExplained (property) {
      return Packages.edu.wpi.always.Always.THIS.getUserModel().isProperty(Packages.edu.wpi.always.explain.ExplainPlugin[property]);
    }

    /* These variables can be changed either here or using eval command in console.  Note
       the values here only apply to the session instance of Disco.  Tracing in Disco-based
       plugins can be set in the plugin model or plugin console. */
    
    Packages.edu.wpi.always.Always.TRACE = true;
    Packages.edu.wpi.disco.rt.DiscoRT.TRACE = false;
    
    /* Rules for progressing through closeness levels.  These are here rather than in
       RelationshipManager.java in order to avoid compile dependency on plugin projects
    */

    model = Packages.edu.wpi.always.Always.THIS.getUserModel();
    if ( model.getCloseness() != Packages.edu.wpi.always.Closeness.Companion ) {
       if ( Packages.edu.wpi.always.about.AboutPlugin.isPerformed() ||
            Packages.plugins.ExercisePlugin.isPerformed() ||
            Packages.plugins.StorytellingPlugin.isPerformed() ||
            Packages.edu.neu.always.skype.SkypePlugin.isPerformed() ||
            ( Packages.edu.wpi.always.enroll.EnrollPlugin.isPerformed() &amp;&amp;	
              Packages.edu.wpi.always.calendar.CalendarPlugin.isPerformed() ) )
           model.setCloseness(Packages.edu.wpi.always.Closeness.Companion)
        else if ( model.getCloseness() != Packages.edu.wpi.always.Closeness.Acquaintance ) {
           if ( Packages.edu.wpi.always.enroll.EnrollPlugin.isPerformed() ||
                Packages.edu.wpi.always.calendar.CalendarPlugin.isPerformed() ||
                ( days() &gt; 6 &amp;&amp; sessions() &gt; days()/2 &amp;&amp;
                  ( Packages.edu.wpi.always.about.CheckersPlugin.isPerformed() ||
                    Packages.plugins.ExplainPlugin.isPerformed() ||
                    Packages.edu.wpi.always.enroll.EnrollPlugin.isPerformed() ||	
                    Packages.edu.wpi.always.calendar.CalendarPlugin.isPerformed() ||
                    Packages.plugins.AnecdotesPlugin.isPerformed() ||
                    Packages.plugins.HealthPlugin.isPerformed() ||
                    Packages.plugins.NutritionPlugin.isPerformed() ||	
                    Packages.edu.wpi.always.srummy.SrummyPlugin.isPerformed() ||
                    Packages.edu.wpi.always.ttt.TTTPlugin.isPerformed() ) ) )
               model.setCloseness(Packages.edu.wpi.always.Closeness.Acquaintance);
         }
    }
    
  </script>

</taskModel>
