// (c) by Fraunhofer IIS, Department Electronic Imaging
//
// PROJECT     : Shore
//
// AUTHOR      : Andreas Ernst, Tobias Ruf
//
// DESCRIPTION : See below.
//
// CHANGED BY  : $LastChangedBy:  $
//
// DATE        : $LastChangedDate: $
//
// REVISION    : $LastChangedRevision: $
//
// start below with your implementation

#include "shore/CreateFaceEngine.h"

#include <string>
#include <sstream>
#include <iostream>

//==============================================================================

namespace Shore
{


Shore::Engine* CreateFaceEngine( float timeBase,
                                 bool updateTimeBase,
                                 unsigned long threadCount,
                                 char const* modelType,
                                 float imageScale,
                                 float minFaceSize,
                                 long minFaceScore,
                                 float idMemoryLength,
                                 char const* idMemoryType,
                                 bool trackFaces,
                                 char const* phantomTrap,
                                 bool searchEyes,
                                 bool searchNose,
                                 bool searchMouth,
                                 bool analyzeEyes,
                                 bool analyzeMouth,
                                 bool analyzeGender,
                                 bool analyzeAge,
                                 bool analyzeHappy,
                                 bool analyzeSad,
                                 bool analyzeSurprised,
                                 bool analyzeAngry,
                                 Gallery* gallery )
{
   // The setup script is splitted into parts, because some
   // compilers grumble about c-strings that exceed 65536 bytes.
   std::string setupScript =
   std::string(
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "-- Some hidden parameters that may be modified by the user if really necessary. \n"
   "Config = {                                                                      \n"
   "   -- The following MinShift and MaxShift parameters can be used to adapt the   \n"
   "   -- responsivity and amplitude of the specific analyzer outputs. The MinShift \n"
   "   -- value shifts the lower bound and the MaxShift value the upper bound of    \n"
   "   -- the corresponding rating. It does not change the codomain of the ratings  \n"
   "   -- (which are always in the range [0,100]), but how the different ratings    \n"
   "   -- react. Reasonable values for these parameters are within the range        \n"
   "   -- [-1.0 .. 1.0] whereas the constraint MinShift - MaxShift < 1.0 must       \n"
   "   -- always be true.                                                           \n"
   "   -- For example if a certain rating is always in the range [30, 100] it       \n"
   "   -- might be a good choice to set the corresponding MinShift to 0.3. On the   \n"
   "   -- other side if a rating does only show values in the range [0, 20] it      \n"
   "   -- might be better to set MinShift to -1 and MaxShift to -0.8.               \n"
   "   Angry          = { MinShift = 0, MaxShift = 0 },                             \n"
   "   Happy          = { MinShift = 0, MaxShift = 0 },                             \n"
   "   Sad            = { MinShift = 0, MaxShift = 0 },                             \n"
   "   Surprised      = { MinShift = 0, MaxShift = 0 },                             \n"
   "   RightEyeClosed = { MinShift = 0, MaxShift = 0 },                             \n"
   "   LeftEyeClosed  = { MinShift = 0, MaxShift = 0 },                             \n"
   "   MouthOpen      = { MinShift = 0, MaxShift = 0 },                             \n"
   "                                                                                \n"
   "   -- The following MaleAttenuation and FemaleAttenuation parameters can be     \n"
   "   -- modified to adapt the responsivity of the Male and Female rating for      \n"
   "   -- analyzing the gender of faces. Valid ranges are [0, 1[. The higher the    \n"
   "   -- attenuation, the lower is the responsivity of the corresponding rating.   \n"
   "   Gender = { MaleAttenuation = 0, FemaleAttenuation = 0.15 },                  \n"
   "                                                                                \n"
   "   -- The following MinMatch and MaxViewCount parameters can be used to adapt   \n"
   "   -- the behaviour of the id memory module. MinMatch specifies the minimal     \n"
   "   -- matching score of two faces to consider them as the same person (the      \n"
   "   -- reasonable range is about [40, 70] for the used model). MaxViewCount      \n"
   "   -- specifies the maximum number of views memorized for one sample in the     \n"
   "   -- gallery. The higher it is the more time consuming is the process.         \n"
   "   ObjectId = { MinMatch = 55, MaxViewCount = 15 },                             \n"
   "}                                                                               \n"
   "--==============================================================================\n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function CreateFaceEngine( timeBase,                                            \n"
   "                           updateTimeBase,                                      \n"
   "                           threadCount,                                         \n"
   "                           modelType,                                           \n"
   "                           imageScale,                                          \n"
   "                           minFaceSize,                                         \n"
   "                           minFaceScore,                                        \n"
   "                           idMemoryLength,                                      \n"
   "                           idMemoryType,                                        \n"
   "                           trackFaces,                                          \n"
   "                           phantomTrap,                                         \n"
   "                           searchEyes,                                          \n"
   "                           searchNose,                                          \n"
   "                           searchMouth,                                         \n"
   "                           analyzeEyes,                                         \n"
   "                           analyzeMouth,                                        \n"
   "                           analyzeGender,                                       \n"
   "                           analyzeAge,                                          \n"
   "                           analyzeHappy,                                        \n"
   "                           analyzeSad,                                          \n"
   "                           analyzeSurprised,                                    \n"
   "                           analyzeAngry,                                        \n"
   "                           gallery )                                            \n"
   "                                                                                \n"
   "   -- Check whether the version of the script and Shore fit together!           \n"
   "   if Version() ~= \"Shore 1.4.0\" then                                         \n"
   "      Warning( \"CreateFaceEngine\", \"SHORE version and setup script differ\" )\n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Lifes the time base between 0.0 and 10.0?                                 \n"
   "   if timeBase < 0.0 or timeBase > 10.0 then                                    \n"
   "      Error( \"CreateFaceEngine\", \"invalid time base\" )                      \n"
   "      return nil                                                                \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Is thread count smaller than 10?                                          \n"
   "   if threadCount < 1 or threadCount > 10 then                                  \n"
   "      Error( \"CreateFaceEngine\", \"invalid thread count\" )                   \n"
   "      return nil                                                                \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Do we have a correct model?                                               \n"
   "   if ModelType[modelType] == nil then                                          \n"
   "      Error( \"CreateFaceEngine\", \"invalid model type, please use \" ..       \n"
   "                                 \"Face.Front, Face.Rotated or Face.Profile\" ) \n"
   "      return nil                                                                \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Is the image scale valid?                                                 \n"
   "   if imageScale <= 0.0 or imageScale > 3 then                                  \n"
   "      Error( \"CreateFaceEngine\", \"imageScale must be in the range ]0,3]\" )  \n"
   "      return nil                                                                \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Is the min face size greater than or equal to 0.0?                        \n"
   "   if minFaceSize < 0.0 then                                                    \n"
   "      Error( \"CreateFaceEngine\", \"invalid min face size\" )                  \n"
   "      return nil                                                                \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Is the memory for id tracking greater than 0.0?                           \n"
   "   if idMemoryLength < 0.0 or idMemoryLength > 180.0 then                       \n"
   "      Error( \"CreateFaceEngine\", \"invalid id memory length\" )               \n"
   "      return nil                                                                \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Is the id memory type valid?                                              \n"
   "   if IdMemoryType[idMemoryType] == nil then                                    \n"
   "      Error( \"CreateFaceEngine\", \"invalid id memory type\" )                 \n"
   "      return nil                                                                \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Is the phantomTrap string valid?                                          \n"
   "   if not ( phantomTrap == 'Off'  or                                            \n"
   "            phantomTrap == 'Delete' or                                          \n"
   "            phantomTrap == 'Mark' or                                            \n"
   "            phantomTrap == 'Debug' ) then                                       \n"
   "      Error( \"CreateFaceEngine\", \"invalid value for parameter phantomTrap\" )\n"
   "      return nil                                                                \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Are analyzers used without the eye fine search?                           \n"
   "   if searchEyes == false and ( analyzeEyes      == true or                     \n"
   "                                analyzeMouth     == true or                     \n"
   "                                analyzeGender    == true or                     \n"
   "                                analyzeAge       == true or                     \n"
   "                                analyzeHappy     == true or                     \n"
   "                                analyzeSad       == true or                     \n"
   "                                analyzeSurprised == true or                     \n"
   "                                analyzeAngry     == true ) then                 \n"
   "      Remark( \"CreateFaceEngine\",                                             \n"
   "                          [[You will analyze faces without the use of the eye   \n"
   "                            fine search. This configuration can produce poorer  \n"
   "                            analysis results.]] )                               \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Check gallery parameter                                                   \n"
   "   if gallery then                                                              \n"
   "      if type( gallery ) ~= 'string' then                                       \n"
   "         Error( \"CreateFaceEngine\", \"gallery parameter is not a string\" )   \n"
   "         return nil                                                             \n"
   "      end                                                                       \n"
   "                                                                                \n"
   "      if not tonumber( gallery, 16 ) then                                       \n"
   "         Error( \"CreateFaceEngine\", \"invalid gallery parameter\" )           \n"
   "         return nil                                                             \n"
   "      elseif tonumber( gallery, 16 ) == 0 then                                  \n"
   "         gallery = nil                                                          \n"
   "      end                                                                       \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Create a new engine                                                       \n"
   "   engine = NewEngine()                                                         \n"
   "                                                                                \n"
   "   -- Add image size module                                                     \n"
   "   engine:AddImageSize( \"ImageWidth\", \"ImageHeight\" )                       \n"
   "                                                                                \n"
   "   -- Add the optional image resizer                                            \n"
   "   if imageScale ~= 1.0 then                                                    \n"
   "      engine:AddImageResizer( imageScale )                                      \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Add the mean filter to the engine TODO: rename to AddMeanFilter           \n"
   "   engine:AddMeanFilterConverter()                                              \n"
   "                                                                                \n"
   "   -- Face module is always added and needed by the following optional modules  \n"
   "   AddFaceScanner( engine,                                                      \n"
   "                   timeBase,                                                    \n"
   "                   updateTimeBase,                                              \n"
   "                   threadCount,                                                 \n"
   "                   modelType,                                                   \n"
   "                   imageScale,                                                  \n"
   "                   minFaceSize,                                                 \n"
   "                   minFaceScore,                                                \n"
   "                   trackFaces,                                                  \n"
   "                   phantomTrap  )                                               \n"
   "                                                                                \n"
   "   -- Reset the image to the original one, because the analysis modules perform \n"
   "   -- better on non mean filtered images.                                       \n"
   "   engine:AddPatternResetter()                                                  \n"
   "                                                                                \n"
   "   -- Optional eye fine search                                                  \n"
   "   if searchEyes == true then                                                   \n"
   "      AddEyeScanner(   engine, timeBase, updateTimeBase, threadCount )          \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Optional nose fine search                                                 \n"
   "   if searchNose == true then                                                   \n"
   "      AddNoseScanner(  engine, timeBase, updateTimeBase, threadCount )          \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Optional mouth fine search                                                \n"
   "   if searchMouth == true then                                                  \n"
   "      AddMouthScanner( engine, timeBase, updateTimeBase, threadCount )          \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Add track id and optional links to the object after finesearch modules    \n"
   "   AddObjectId( engine, timeBase, updateTimeBase, idMemoryLength, idMemoryType )\n"
   "                                                                                \n"
   "   -- Optional eyes open/closed classification                                  \n"
   "   if analyzeEyes == true then                                                  \n"
   "      AddEyeAnalyzer(       engine, timeBase, updateTimeBase )                  \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Optional mouth open/closed classification                                 \n"
   "   if analyzeMouth == true then                                                 \n"
   "      AddMouthAnalyzer(     engine, timeBase, updateTimeBase )                  \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Optional gender classification                                            \n"
   "   if analyzeGender == true then                                                \n"
   "      AddGenderAnalyzer(    engine, timeBase, updateTimeBase )                  \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Optional age estimation                                                   \n"
   "   if analyzeAge == true then                                                   \n"
   "      AddAgeAnalyzer(    engine, timeBase, updateTimeBase )                     \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Optional happy classification                                             \n"
   "   if analyzeHappy == true then                                                 \n"
   "      AddHappyAnalyzer(     engine, timeBase, updateTimeBase )                  \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Optional sad classification                                               \n"
   "   if analyzeSad == true then                                                   \n"
   "      AddSadAnalyzer(       engine, timeBase, updateTimeBase )                  \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Optional surprised classification                                         \n"
   "   if analyzeSurprised == true then                                             \n"
   "      AddSurprisedAnalyzer( engine, timeBase, updateTimeBase )                  \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Optional angry classification                                             \n"
   "   if analyzeAngry == true then                                                 \n"
   "      AddAngryAnalyzer(     engine, timeBase, updateTimeBase )                  \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Optional identification                                                   \n"
   "   if gallery then                                                              \n"
   "      AddIdentification( engine, gallery )                                      \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Add image count module                                                    \n"
   "   engine:AddImageCount( \"ImageCount\", 1 )                                    \n"
   "                                                                                \n"
   "   -- Measuring the frame rate makes only sense in video mode                   \n"
   "   if timeBase > 0 then                                                         \n"
   "      if updateTimeBase == true then                                            \n"
   "         engine:AddImageRate( \"FrameRate\", timeBase, 1.0 )                    \n"
   "      else                                                                      \n"
   "         engine:AddImageRate( \"FrameRate\", timeBase, 0.0 )                    \n"
   "      end                                                                       \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Resize the content to the original image size if the image was resized    \n"
   "   if imageScale ~= 1.0 then                                                    \n"
   "      engine:AddContentResizer( 1 / imageScale )                                \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Make the object types and attributes consistent!                          \n"
   "   engine:AddObjectAccess(                                                      \n"
   "      \"Object.Type ~= 'Face.Tracked'\",                                        \n"
   "      [[                                                                        \n"
   "         Object.Type = 'Face'                                                   \n"
   "         Object.Attribute.Roll  = Object.Attribute.Roll  or '0'                 \n"
   "         Object.Attribute.Pitch = Object.Attribute.Pitch or '0'                 \n"
   "         Object.Attribute.Yaw   = Object.Attribute.Yaw   or '0'                 \n"
   "      ]]                                                                        \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Add the render options in the demo mode                                   \n"
   "   if demo == true then                                                         \n"
   "      SetRenderOptions( engine,                                                 \n"
   "                        timeBase,                                               \n"
   "                        updateTimeBase,                                         \n"
   "                        threadCount,                                            \n"
   "                        modelType,                                              \n"
   "                        minFaceSize,                                            \n"
   "                        minFaceScore,                                           \n"
   "                        idMemoryLength,                                         \n"
   "                        idMemoryType,                                           \n"
   "                        trackFaces,                                             \n"
   "                        searchEyes,                                             \n"
   "                        searchNose,                                             \n"
   "                        searchMouth,                                            \n"
   "                        analyzeEyes,                                            \n"
   "                        analyzeMouth,                                           \n"
   "                        analyzeGender,                                          \n"
   "                        analyzeAge,                                             \n"
   "                        analyzeHappy,                                           \n"
   "                        analyzeSad,                                             \n"
   "                        analyzeSurprised,                                       \n"
   "                        analyzeAngry )                                          \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   return engine                                                                \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "--==============================================================================\n"
   "--==============================================================================\n"
   "--                                                                              \n"
   "-- The following functions are helpers which are used in the engine create      \n"
   "-- function above. They only add specific functionalities to the provided       \n"
   "-- engine. In most of the functions internal parameters are defined, which      \n"
   "-- could also be customized or adapted to special needs. All these parameters   \n"
   "-- are choosen to fit for most applications. Whether it makes sense to modify   \n"
   "-- them depends on the requirements.                                            \n"
   "--                                                                              \n"
   "--==============================================================================\n"
   "--==============================================================================\n"
   "--==============================================================================\n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "ModelType =                                                                     \n"
   "{                                                                               \n"
   "   ['Face.Front']       =                                                       \n"
   "   {                                                                            \n"
   "      ModelName         = \"FaceFront_24x24_2008_08_29_161712_7\",              \n"
   "      CombThreshold     = -30,                                                  \n"
   "      ObjectSelector    = \"Object.Type == 'Face.Front'\",                      \n"
   "      TrackingActivator = \"Object.Rating.Score > 25\",                         \n"
   "      ObjectModifier    = \"\",                                                 \n"
   "      RenderOptions     = \"\",                                                 \n"
   "   },                                                                           \n"
   "                                                                                \n"
   "   ['Face.Rotated']     =                                                       \n"
   "   {                                                                            \n"
   "      ModelName         = \"FaceRotated_24x24_2008_10_15_180432_24\",           \n"
   "      CombThreshold     = -30,                                                  \n"
   "      ObjectSelector    = \"Object.Type == 'Face'\",                            \n"
   "      TrackingActivator = \"Object.Rating.Score > 32\",                         \n"
   "      ObjectModifier    = [[                                                    \n"
   "         rot = Object.Attribute.Rotation                                        \n"
   "         Object.Attribute.Rotation = nil                                        \n"
   "                                                                                \n"
   "         if rot == \"[-15]\" or rot == \"[0]\" or rot == \"[15]\" then          \n"
   "            Object.Type = \"Face.Front\"                                        \n"
   "         else                                                                   \n"
   "            Object.Type = \"Face.Front.Rotated\"                                \n"
   "         end                                                                    \n"
   "                                                                                \n"
   "         -- Remove the paranthesis '[]'                                         \n"
   "         Object.Attribute.Roll = string.sub( rot, 2, -2 )                       \n"
   "      ]],                                                                       \n"
   "      RenderOptions     = [[                                                    \n"
   "         Object.Attribute._AttributeDisplay_Roll = \"On\"                       \n"
   "      ]]                                                                        \n"
   "                                                                                \n"
   "   },                                                                           \n"
   "                                                                                \n"
   "   ['Face.Profile']     =                                                       \n"
   "   {                                                                            \n"
   "      ModelName         = \"Face_24x24_2009_09_02_185611_48\",                  \n"
   "      CombThreshold     = -30,                                                  \n"
   "      ObjectSelector    = \"Object.Type == 'Face'\",                            \n"
   "      TrackingActivator = \"Object.Rating.Score > 65\",                         \n"
   "      ObjectModifier    = [[                                                    \n"
   "         yaw = Object.Attribute.Yaw                                             \n"
   "                                                                                \n"
   "         if yaw == \"0\" or yaw == \"-45\" or yaw == \"45\" then                \n"
   "            Object.Type = \"Face.Front\"                                        \n"
   "         else                                                                   \n"
   "            Object.Type = \"Face.Profile\"                                      \n"
   "         end                                                                    \n"
   "      ]],                                                                       \n"
   "      RenderOptions     = [[                                                    \n"
   "         Object.Attribute._AttributeDisplay_Yaw   = \"On\"                      \n"
   "                                                                                \n"
   "         if Object.Attribute.Yaw == '-90' or                                    \n"
   "            Object.Attribute.Yaw == '90' then                                   \n"
   "            Object.Attribute._AttributeDisplay_Pitch = \"On\"                   \n"
   "         end                                                                    \n"
   "      ]]                                                                        \n"
   "   }                                                                            \n"
   "}                                                                               \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "IdMemoryType =                                                                  \n"
   "{                                                                               \n"
   "   Spatial =                                                                    \n"
   "   {                                                                            \n"
   "   },                                                                           \n"
   "   Recent  =                                                                    \n"
   "   {                                                                            \n"
   "      splitUpLinks = true,                                                      \n"
   "      keepAllLinks = false,                                                     \n"
   "      idKey        = \"RecentId_\"                                              \n"
   "   },                                                                           \n"
   "   All     =                                                                    \n"
   "   {                                                                            \n"
   "      splitUpLinks = false,                                                     \n"
   "      keepAllLinks = true,                                                      \n"
   "      idKey        = \"PreviousIds\"                                            \n"
   "   }                                                                            \n"
   "}                                                                               \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function SetRenderOptions( engine,                                              \n"
   "                           timeBase,                                            \n"
   "                           updateTimeBase,                                      \n"
   "                           threadCount,                                         \n"
   "                           modelType,                                           \n"
   "                           minFaceSize,                                         \n"
   "                           minFaceScore,                                        \n"
   "                           idMemoryLength,                                      \n"
   "                           idMemoryType,                                        \n"
   "                           trackFaces,                                          \n"
   "                           searchEyes,                                          \n"
   "                           searchNose,                                          \n"
   "                           searchMouth,                                         \n"
   "                           analyzeEyes,                                         \n"
   "                           analyzeMouth,                                        \n"
   "                           analyzeGender,                                       \n"
   "                           analyzeAge,                                          \n"
   "                           analyzeHappy,                                        \n"
   "                           analyzeSad,                                          \n"
   "                           analyzeSurprised,                                    \n"
   "                           analyzeAngry )                                       \n"
   "   -- Turn everything off as default                                            \n"
   "   local display =                                                              \n"
   "   [[                                                                           \n"
   "      Object.Attribute._RatingDisplay    = \"Off\"                              \n"
   "      Object.Attribute._TypeDisplay      = \"Off\"                              \n"
   "      Object.Attribute._MarkerDisplay    = \"Off\"                              \n"
   "      Object.Attribute._AttributeDisplay = \"Off\"                              \n"
   "   ]]                                                                           \n"
   "                                                                                \n"
   "   if timeBase > 0.0 then                                                       \n"
   "      display = display .. [[                                                   \n"
   "         Object.Attribute.Uptime =                                              \n"
   "            string.format( \"%.2f\", Object.Rating.Uptime )                     \n"
   "                                                                                \n"
   "         Object.Attribute._AttributeDisplay_Uptime    = \"On\"                  \n"
   "         Object.Attribute._AttributeDisplay_Id        = \"On\"                  \n"
   "      ]]                                                                        \n"
   "                                                                                \n"
   "      if idMemoryLength > 0.0 then                                              \n"
   "         if idMemoryType == \"Recent\" then                                     \n"
   "            -- Show at most 3 links in the demo program!                        \n"
   "            display = display .. [[                                             \n"
   "               Object.Attribute._AttributeDisplay_RecentId_0 = \"On\"           \n"
   "               Object.Attribute._AttributeDisplay_RecentId_1 = \"On\"           \n"
   "               Object.Attribute._AttributeDisplay_RecentId_2 = \"On\"           \n"
   "               Object.Attribute._AttributeDisplay_Uptime     = \"Off\"          \n"
   "            ]]                                                                  \n"
   "         elseif idMemoryType == \"All\" then                                    \n"
   "            display = display .. [[                                             \n"
   "               Object.Attribute._AttributeDisplay_PreviousIds = \"On\"          \n"
   "               Object.Attribute._AttributeDisplay_Uptime      = \"Off\"         \n"
   "            ]]                                                                  \n"
   "         end                                                                    \n"
   "      end                                                                       \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Add the model type related render options                                 \n"
   "   display = display .. ModelType[modelType].RenderOptions                      \n"
   "                                                                                \n"
   "   if trackFaces == true then                                                   \n"
   "      display = display .. [[                                                   \n"
   "         if Object.Type == \"Face.Tracked\" then                                \n"
   "            Object.Attribute._TypeDisplay = \"On\"                              \n"
   "         end                                                                    \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   if phantomTrap == \"Mark\" then                                              \n"
   "      display = display .. [[                                                   \n"
   "         Object.Attribute._AttributeDisplay_Phantom = \"On\"                    \n"
   "         if Object.Attribute.Phantom == \"Yes\" then                            \n"
   "            Object.Attribute._RegionColor = '0,0,0'                             \n"
   "         end                                                                    \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   if searchEyes == true then                                                   \n"
   "      display = display .. [[                                                   \n"
   "         if Object.Part.LeftEye ~= nil then                                     \n"
   "            Object.Part.LeftEye.Attribute._RatingDisplay = \"Off\"              \n"
   "            Object.Part.LeftEye.Attribute._TypeDisplay   = \"Off\"              \n"
   "            Object.Part.LeftEye.Attribute._MarkerDisplay = \"Off\"              \n"
   "         end                                                                    \n"
   "                                                                                \n"
   "         if Object.Part.RightEye ~= nil then                                    \n"
   "            Object.Part.RightEye.Attribute._RatingDisplay = \"Off\"             \n"
   "            Object.Part.RightEye.Attribute._TypeDisplay   = \"Off\"             \n"
   "            Object.Part.RightEye.Attribute._MarkerDisplay = \"Off\"             \n"
   "         end                                                                    \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   if searchNose == true then                                                   \n"
   "      display = display .. [[                                                   \n"
   "         if Object.Part.Nose ~= nil then                                        \n"
   "            Object.Part.Nose.Attribute._RatingDisplay = \"Off\"                 \n"
   "            Object.Part.Nose.Attribute._TypeDisplay   = \"Off\"                 \n"
   "            Object.Part.Nose.Attribute._MarkerDisplay = \"Off\"                 \n"
   "         end                                                                    \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   if searchMouth == true then                                                  \n"
   "      display = display .. [[                                                   \n"
   "         if Object.Part.Mouth ~= nil then                                       \n"
   "            Object.Part.Mouth.Attribute._RatingDisplay = \"Off\"                \n"
   "            Object.Part.Mouth.Attribute._TypeDisplay   = \"Off\"                \n"
   "            Object.Part.Mouth.Attribute._MarkerDisplay = \"Off\"                \n"
   "         end                                                                    \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   if analyzeEyes == true then                                                  \n"
   "      display = display .. [[                                                   \n"
   "         if Object.Rating.LeftEyeClosed ~= nil then                             \n"
   "            Object.Attribute._MarkerDisplay_LeftEye      = \"On\"               \n"
   "            Object.Attribute._MarkerScale_LeftEye        = 0.5                  \n"
   "                                                                                \n"
   "            if Object.Rating.LeftEyeClosed > 60 then                            \n"
   "               Object.Attribute._MarkerCharacter_LeftEye = \"-\"                \n"
   "            else                                                                \n"
   "               Object.Attribute._MarkerCharacter_LeftEye = \"o\"                \n"
   "            end                                                                 \n"
   "         end                                                                    \n"
   "                                                                                \n"
   "         if Object.Part.LeftEye ~= nil then                                     \n"
   "            Object.Part.LeftEye.Attribute._RegionDisplay = \"Off\"              \n"
   "         end                                                                    \n"
   "                                                                                \n"
   "         if Object.Rating.RightEyeClosed ~= nil then                            \n"
   "            Object.Attribute._MarkerDisplay_RightEye      = \"On\"              \n"
   "            Object.Attribute._MarkerScale_RightEye        = 0.5                 \n"
   "                                                                                \n"
   "            if Object.Rating.RightEyeClosed > 60 then                           \n"
   "               Object.Attribute._MarkerCharacter_RightEye = \"-\"               \n"
   "            else                                                                \n"
   "               Object.Attribute._MarkerCharacter_RightEye = \"o\"               \n"
   "            end                                                                 \n"
   "         end                                                                    \n"
   "                                                                                \n"
   "         if Object.Part.RightEye ~= nil then                                    \n"
   "            Object.Part.RightEye.Attribute._RegionDisplay = \"Off\"             \n"
   "         end                                                                    \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   if analyzeMouth == true then                                                 \n"
   "      display = display .. [[                                                   \n"
   "         Object.Attribute._RatingDisplay_MouthOpen = \"On\"                     \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   if analyzeGender == true then                                                \n"
   "      display = display .. [[                                                   \n"
   "         Object.Attribute._AttributeDisplay_Gender = \"On\"                     \n"
   "                                                                                \n"
   "         if Object.Attribute.Gender == 'Male' then                              \n"
   "            Object.Attribute._RegionColor = '0,0,255'                           \n"
   "         elseif Object.Attribute.Gender == 'Female' then                        \n"
   "            Object.Attribute._RegionColor = '255,0,0'                           \n"
   "         end                                                                    \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   if analyzeAge == true then                                                   \n"
   "      display = display .. [[                                                   \n"
   "         Object.Attribute._AttributeDisplay_Age = \"On\"                        \n"
   "                                                                                \n"
   "         local age       = Object.Rating.Age                                    \n"
   "         local deviation = Object.Rating.AgeDeviation                           \n"
   "                                                                                \n"
   "         if age and deviation then                                              \n"
   "            Object.Attribute.Age = age .. \" [+/-\"  .. deviation .. \"]\"      \n"
   "         end                                                                    \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   if analyzeHappy == true then                                                 \n"
   "      display = display .. [[                                                   \n"
   "         Object.Attribute._RatingDisplay_Happy = \"On\"                         \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   if analyzeSad == true then                                                   \n"
   "      display = display .. [[                                                   \n"
   "         Object.Attribute._RatingDisplay_Sad = \"On\"                           \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   if analyzeSurprised == true then                                             \n"
   "      display = display .. [[                                                   \n"
   "         Object.Attribute._RatingDisplay_Surprised = \"On\"                     \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   if analyzeAngry == true then                                                 \n"
   "      display = display .. [[                                                   \n"
   "         Object.Attribute._RatingDisplay_Angry = \"On\"                         \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Apply the render options to all kinds of objects.                         \n"
   "   engine:AddObjectAccess( \"true\", display )                                  \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddFaceScanner( engine,                                                \n"
   "                         timeBase,                                              \n"
   "                         updateTimeBase,                                        \n"
   "                         threadCount,                                           \n"
   "                         modelType,                                             \n"
   "                         imageScale,                                            \n"
   "                         minFaceSize,                                           \n"
   "                         minFaceScore,                                          \n"
   "                         trackFaces,                                            \n"
   "                         phantomTrap )                                          \n"
   "                                                                                \n"
   "   -- Type for tracked objects                                                  \n"
   "   local trackingType = \"Face.Tracked\"                                        \n"
   "                                                                                \n"
   "   -- We must take the imageScale into account for minFaceSize                  \n"
   "   if minFaceSize > 1 then                                                      \n"
   "      -- Magic number 2 to leave min size greater than one                      \n"
   "      minFaceSize = math.max( 2, imageScale * imageScale * minFaceSize )        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Use the helper function                                                   \n"
   "   AddObjectScanner(                                                            \n"
   "      engine,                                                                   \n"
   "      timeBase,                                                                 \n"
   "      updateTimeBase,                                                           \n"
   "      threadCount,                                                              \n"
   "      minFaceSize,                                                              \n"
   "      minFaceScore,                                                             \n"
   "      trackFaces,                                                               \n"
   "      trackingType,                                                             \n"
   "      phantomTrap,                                                              \n"
   "      modelType                                                                 \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Add the individual object modifier.                                       \n"
   "   engine:AddObjectAccess(                                                      \n"
   "      ModelType[modelType].ObjectSelector,                                      \n"
   "      ModelType[modelType].ObjectModifier                                       \n"
   "   )                                                                            \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddEyeScanner( engine, timeBase, updateTimeBase, threadCount )         \n"
   "   -- Models for the search of the left and the right eye                       \n"
   "   local leftEye  = \"LeftEyeFront_16x16_2008_10_20_190938_4\"                  \n"
   "   local rightEye = \"RightEyeFront_16x16_2008_10_20_190953_4\"                 \n"
   "                                                                                \n"
   "   -- Workaround for the profile model: modify the object region depending      \n"
   "   -- on the yaw value, to make the eye search more stable!                     \n"
   "   engine:AddObjectAccess(                                                      \n"
   "      \"Object.Attribute.Yaw ~= nil\",                                          \n"
   "      [[                                                                        \n"
   "         y = Object.Attribute.Yaw                                               \n"
   "         a = Object.Region                                                      \n"
   "         l = a.Left                                                             \n"
   "         t = a.Top                                                              \n"
   "         r = a.Right                                                            \n"
   "         b = a.Bottom                                                           \n"
   "                                                                                \n"
   "         Object.Attribute.Region =                                              \n"
   "            'return {' ..  'Left=' .. l ..  ',Top=' .. t ..                     \n"
   "            ',Right=' .. r .. ',Bottom=' .. b .. '}'                            \n"
   "                                                                                \n"
   "         dw = 0.1 * ( r - l )                                                   \n"
   "         dh = 0.1 * ( b - t )                                                   \n"
   ) + std::string(
   "                                                                                \n"
   "         if y == '45' then                                                      \n"
   "            a.Right  = r - 2.0 * dw                                             \n"
   "            a.Left   = l - 1.0 * dw                                             \n"
   "            a.Bottom = b - 1.0 * dh                                             \n"
   "         elseif y == '0' then                                                   \n"
   "            a.Right  = r - 0.5 * dw                                             \n"
   "            a.Left   = l + 0.5 * dw                                             \n"
   "            a.Bottom = b - 1.0 * dh                                             \n"
   "         elseif y == '-45' then                                                 \n"
   "            a.Right  = r + 1.0 * dw                                             \n"
   "            a.Left   = l + 2.0 * dw                                             \n"
   "            a.Bottom = b - 1.0 * dh                                             \n"
   "         end                                                                    \n"
   "   ]] )                                                                         \n"
   "                                                                                \n"
   "   -- Use the helper function for left eye scanner                              \n"
   "   AddPartScanner(                                                              \n"
   "      engine,                                                                   \n"
   "      timeBase,                                                                 \n"
   "      updateTimeBase,                                                           \n"
   "      threadCount,                                                              \n"
   "      0.4,                -- Region left border                                 \n"
   "      -0.1,               -- Region top border                                  \n"
   "      1.1,                -- Region right border                                \n"
   "      0.6,                -- Region bottom border                               \n"
   "      0.07,               -- Min size                                           \n"
   "      0.5,                -- Max size                                           \n"
   "      0,                  -- Min score                                          \n"
   "      1.15,               -- Scale factor                                       \n"
   "      \"Face.Front\",       -- Object type                                      \n"
   "      leftEye,            -- Part model name                                    \n"
   "      \"LeftEye.Front\",    -- Part type                                        \n"
   "      \"LeftEye\",          -- Part key                                         \n"
   "      -30                 -- Comb threshold                                     \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Use the helper function for right eye scanner                             \n"
   "   AddPartScanner(                                                              \n"
   "      engine,                                                                   \n"
   "      timeBase,                                                                 \n"
   "      updateTimeBase,                                                           \n"
   "      threadCount,                                                              \n"
   "      -0.1,               -- Region left border                                 \n"
   "      -0.1,               -- Region top border                                  \n"
   "      0.6,                -- Region right border                                \n"
   "      0.6,                -- Region bottom border                               \n"
   "      0.07,               -- Min size                                           \n"
   "      0.5,                -- Max size                                           \n"
   "      0,                  -- Min score                                          \n"
   "      1.15,               -- Scale factor                                       \n"
   "      \"Face.Front\",       -- Object type                                      \n"
   "      rightEye,           -- Part model name                                    \n"
   "      \"RightEye.Front\",   -- Part type                                        \n"
   "      \"RightEye\",         -- Part key                                         \n"
   "      -30                 -- Comb threshold                                     \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Workaround for the profile model: restore the original object region      \n"
   "   engine:AddObjectAccess(                                                      \n"
   "      \"Object.Attribute.Yaw ~= nil\",                                          \n"
   "      [[                                                                        \n"
   "         Object.Region = loadstring( Object.Attribute.Region )()                \n"
   "         Object.Attribute.Region = nil                                          \n"
   "      ]]                                                                        \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Copy the part eye markers to the object eye markers                       \n"
   "   engine:AddObjectAccess(                                                      \n"
   "      \"Object.Type == 'Face.Front'\",                                          \n"
   "      [[                                                                        \n"
   "         if Object.Part.LeftEye ~= nil then                                     \n"
   "            Object.Marker.LeftEye = Object.Part.LeftEye.Marker.LeftEye          \n"
   "            Object.Part.LeftEye.Marker.RightEye = nil                           \n"
   "         end                                                                    \n"
   "                                                                                \n"
   "         if Object.Part.RightEye ~= nil then                                    \n"
   "            Object.Marker.RightEye = Object.Part.RightEye.Marker.RightEye       \n"
   "            Object.Part.RightEye.Marker.LeftEye = nil                           \n"
   "         end                                                                    \n"
   "      ]]                                                                        \n"
   "   )                                                                            \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddNoseScanner( engine, timeBase, updateTimeBase, threadCount )        \n"
   "   -- Model to search for noses                                                 \n"
   "   local modelName = \"NoseFront_16x16_2008_10_17_134731_4\"                    \n"
   "                                                                                \n"
   "   -- Use the helper function                                                   \n"
   "   AddPartScanner(                                                              \n"
   "      engine,                                                                   \n"
   "      timeBase,                                                                 \n"
   "      updateTimeBase,                                                           \n"
   "      threadCount,                                                              \n"
   "      0.1,                -- Region left border                                 \n"
   "      0.1,                -- Region top border                                  \n"
   "      0.9,                -- Region right border                                \n"
   "      0.9,                -- Region bottom border                               \n"
   "      0.07,               -- Min size                                           \n"
   "      0.5,                -- Max size                                           \n"
   "      0,                  -- Min score                                          \n"
   "      1.15,               -- Scale factor                                       \n"
   "      \"Face.Front\",       -- Object type                                      \n"
   "      modelName,          -- Part model name                                    \n"
   "      \"Nose.Front\",       -- Part type                                        \n"
   "      \"Nose\",             -- Part key                                         \n"
   "      -30                 -- Comb threshold                                     \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Copy the part nose marker to the objects nose marker                      \n"
   "   engine:AddObjectAccess(                                                      \n"
   "      \"Object.Type == 'Face.Front'\",                                          \n"
   "      [[                                                                        \n"
   "         if Object.Part.Nose ~= nil then                                        \n"
   "            Object.Part.Nose.Marker.LeftEye  = nil                              \n"
   "            Object.Part.Nose.Marker.RightEye = nil                              \n"
   "            Object.Marker.NoseTip = Object.Part.Nose.Marker.NoseTip             \n"
   "         end                                                                    \n"
   "      ]]                                                                        \n"
   "   )                                                                            \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddMouthScanner( engine, timeBase, updateTimeBase, threadCount )       \n"
   "   -- Model to search for mouths                                                \n"
   "   local modelName = \"MouthFront_16x14_2008_10_20_190419_4\"                   \n"
   "                                                                                \n"
   "   -- Use the helper function                                                   \n"
   "   AddPartScanner(                                                              \n"
   "      engine,                                                                   \n"
   "      timeBase,                                                                 \n"
   "      updateTimeBase,                                                           \n"
   "      threadCount,                                                              \n"
   "      0.1,                -- Region left border                                 \n"
   "      0.3,                -- Region top border                                  \n"
   "      0.9,                -- Region right border                                \n"
   "      1.2,                -- Region bottom border                               \n"
   "      0.05,               -- Min size                                           \n"
   "      0.8,                -- Max size                                           \n"
   "      0,                  -- Min score                                          \n"
   "      1.15,               -- Scale factor                                       \n"
   "      \"Face.Front\",       -- Object type                                      \n"
   "      modelName,          -- Part model name                                    \n"
   "      \"Mouth.Front\",      -- Part type                                        \n"
   "      \"Mouth\",            -- Part key                                         \n"
   "      -30                 -- Comb threshold                                     \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Copy the part mouth markers to the objects mouth markers                  \n"
   "   engine:AddObjectAccess(                                                      \n"
   "      \"Object.Type == 'Face.Front'\",                                          \n"
   "      [[                                                                        \n"
   "         if Object.Part.Mouth ~= nil then                                       \n"
   "            Object.Marker.LeftMouthCorner  =                                    \n"
   "               Object.Part.Mouth.Marker.LeftMouthCorner                         \n"
   "            Object.Marker.RightMouthCorner =                                    \n"
   "               Object.Part.Mouth.Marker.RightMouthCorner                        \n"
   "         end                                                                    \n"
   "      ]]                                                                        \n"
   "   )                                                                            \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddEyeAnalyzer( engine, timeBase, updateTimeBase )                     \n"
   "   -- Only analyze \"Face.Front\" objects                                       \n"
   "   local selector        = \"Object.Type == 'Face.Front'\"                      \n"
   "                                                                                \n"
   "   -- Model for the left and right eyes                                         \n"
   "   local leftEye         = \"LeftEyeClosed_16x16_2008_10_23_185544\"            \n"
   "   local rightEye        = \"RightEyeClosed_16x16_2008_10_23_185544\"           \n"
   "                                                                                \n"
   "   -- Identifier for score to use                                               \n"
   "   local leftIdentifier  = \"LeftEyeClosedScore\"                               \n"
   "   local rightIdentifier = \"RightEyeClosedScore\"                              \n"
   "                                                                                \n"
   "   -- Use the helper function                                                   \n"
   "   AddAnalyzer(                                                                 \n"
   "      engine,                                                                   \n"
   "      timeBase,                                                                 \n"
   "      updateTimeBase,                                                           \n"
   "      leftEye,              -- Model name                                       \n"
   "      selector,             -- Object selector                                  \n"
   "      leftIdentifier,       -- Identifier                                       \n"
   "      0.1,                  -- Length of the filter                             \n"
   "      0.05,                 -- Stabilizer threshold in %                        \n"
   "      -45, 35,              -- Modifier sourceA, sourceB                        \n"
   "      Config.LeftEyeClosed.MinShift,                                            \n"
   "      Config.LeftEyeClosed.MaxShift                                             \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Use the helper function                                                   \n"
   "   AddAnalyzer(                                                                 \n"
   "      engine,                                                                   \n"
   "      timeBase,                                                                 \n"
   "      updateTimeBase,                                                           \n"
   "      rightEye,             -- Model name                                       \n"
   "      selector,             -- Object selector                                  \n"
   "      rightIdentifier,      -- Identifier                                       \n"
   "      0.1,                  -- Length of the filter                             \n"
   "      0.05,                 -- Stabilizer threshold in %                        \n"
   "      -40, 40,              -- Modifier sourceA, sourceB                        \n"
   "      Config.RightEyeClosed.MinShift,                                           \n"
   "      Config.RightEyeClosed.MaxShift                                            \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Delete the LeftEyeScore and RightEyeScore form the object. Its only for   \n"
   "   -- internal use.                                                             \n"
   "   -- Copy the score the normale rating, if the score is used.                  \n"
   "   if leftIdentifier == \"LeftEyeClosedScore\" then                             \n"
   "      access =                                                                  \n"
   "      [[                                                                        \n"
   "         Object.Rating.LeftEyeClosed       = Object.Rating.LeftEyeClosedScore   \n"
   "         Object.Rating.LeftEyeClosedScore  = nil                                \n"
   "      ]]                                                                        \n"
   "   else                                                                         \n"
   "      access =                                                                  \n"
   "      [[                                                                        \n"
   "         Object.Rating.LeftEyeClosedScore  = nil                                \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Copy the score the normale rating, if the score is used.                  \n"
   "   if rightIdentifier == \"RightEyeClosedScore\" then                           \n"
   "      access = access ..                                                        \n"
   "      [[                                                                        \n"
   "         Object.Rating.RightEyeClosed      = Object.Rating.RightEyeClosedScore  \n"
   "         Object.Rating.RightEyeClosedScore = nil                                \n"
   "      ]]                                                                        \n"
   "   else                                                                         \n"
   "      access = access ..                                                        \n"
   "      [[                                                                        \n"
   "         Object.Rating.RightEyeClosedScore = nil                                \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   engine:AddObjectAccess( selector, access )                                   \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddMouthAnalyzer( engine, timeBase, updateTimeBase )                   \n"
   "   -- Only analyze \"Face.Front\" objects                                       \n"
   "   local selector   = \"Object.Type == 'Face.Front'\"                           \n"
   "                                                                                \n"
   "   -- Model for mouth analysis                                                  \n"
   "   local modelName  = \"MouthOpen_16x14_2008_10_23_185229\"                     \n"
   "                                                                                \n"
   "   -- Identifier for the score to use                                           \n"
   "   local identifier = \"MouthOpenScore\"                                        \n"
   "                                                                                \n"
   "   -- Use the helper function                                                   \n"
   "   AddAnalyzer(                                                                 \n"
   "      engine,                                                                   \n"
   "      timeBase,                                                                 \n"
   "      updateTimeBase,                                                           \n"
   "      modelName,                                                                \n"
   "      selector,            -- Object selector                                   \n"
   "      identifier,          -- Identifier                                        \n"
   "      0.1,                 -- Length of the filter                              \n"
   "      0.05,                -- Stabilizer threshold in %                         \n"
   "      -15, 60,             -- Modifier sourceA, sourceB                         \n"
   "      Config.MouthOpen.MinShift,                                                \n"
   "      Config.MouthOpen.MaxShift                                                 \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Delete the HappyScore form object. Its only for internal use.             \n"
   "   -- Copy the score the normale rating, if the score is used.                  \n"
   "   if identifier == \"MouthOpenScore\" then                                     \n"
   "      access =                                                                  \n"
   "      [[                                                                        \n"
   "         Object.Rating.MouthOpen = Object.Rating.MouthOpenScore                 \n"
   "         Object.Rating.MouthOpenScore = nil                                     \n"
   "      ]]                                                                        \n"
   "   else                                                                         \n"
   "      access =                                                                  \n"
   "      [[                                                                        \n"
   "         Object.Rating.MouthOpenScore = nil                                     \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   engine:AddObjectAccess( selector, access )                                   \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddGenderAnalyzer( engine, timeBase, updateTimeBase )                  \n"
   "   -- Only analyze \"Face.Front\" objects                                       \n"
   "   local selector      = \"Object.Type == 'Face.Front'\"                        \n"
   "   local modelName     = \"Gender_26x26_2008_09_04_174103\"                     \n"
   "   local identifier    = \"Gender\"                                             \n"
   "   local defaultValue  = \"\"                                                   \n"
   "   local positiveLabel = \"Female\"                                             \n"
   "   local positiveTime  = \"FemaleTime\"                                         \n"
   "   local negativeLabel = \"Male\"                                               \n"
   "   local negativeTime  = \"MaleTime\"                                           \n"
   "                                                                                \n"
   "   -- Additional video parameters                                               \n"
   "   local minTrackOverlap = 0.2                                                  \n"
   "   local minHistoryTime  = 0.5                                                  \n"
   "                                                                                \n"
   "   -- For the clarification name                                                \n"
   "   local attributeKey = identifier                                              \n"
   "                                                                                \n"
   "   -- Ask for this model, maybe it can be load from file                        \n"
   "   RequireModel( modelName )                                                    \n"
   "                                                                                \n"
   "   -- Add the basic analysis step                                               \n"
   "   engine:AddAnalyzer( selector, modelName )                                    \n"
   "                                                                                \n"
   "   -- Take the user config for female into account                              \n"
   "   engine:AddRatingModifier(                                                    \n"
   "      selector,                                                                 \n"
   "      positiveLabel,                                                            \n"
   "      Config.Gender.FemaleAttenuation * 100, 100,                               \n"
   "      0,  100,                                                                  \n"
   "      true                                                                      \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Take the user config for male into account                                \n"
   "   engine:AddRatingModifier(                                                    \n"
   "      selector,                                                                 \n"
   "      negativeLabel,                                                            \n"
   "      Config.Gender.MaleAttenuation * 100, 100,                                 \n"
   "      0,  100,                                                                  \n"
   "      true                                                                      \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Single image mode                                                         \n"
   "   if timeBase == 0.0 then                                                      \n"
   "      -- In single mode just make a simple threshold classification of the      \n"
   "      -- classification score and set the appropriate attribute                 \n"
   "      engine:AddConditionalAttribute(                                           \n"
   "         selector,                                                              \n"
   "         attributeKey,                                                          \n"
   "         defaultValue,                                                          \n"
   "         \"Object.Rating.\" .. positiveLabel ..                                 \n"
   "            \" >= Object.Rating.\" .. negativeLabel,                            \n"
   "         positiveLabel,                                                         \n"
   "         \"Object.Rating.\" .. positiveLabel ..                                 \n"
   "            \" <  Object.Rating.\" .. negativeLabel,                            \n"
   "         negativeLabel                                                          \n"
   "      )                                                                         \n"
   "   -- Video mode                                                                \n"
   "   else                                                                         \n"
   "      -- In the video mode do a simple filtering over time. That is measure     \n"
   "      -- how long the classification produced the same result within a          \n"
   "      -- given historyLength period                                             \n"
   "      engine:AddObjectTimer(                                                    \n"
   "         selector,                                                              \n"
   "         minTrackOverlap,                                                       \n"
   "         timeBase,                                                              \n"
   "         updateTimeBase,                                                        \n"
   "         \"Object.Rating.\" .. positiveLabel ..                                 \n"
   "            \" >= Object.Rating.\" .. negativeLabel,                            \n"
   "         positiveTime,                                                          \n"
   "         0,    -- inital time                                                   \n"
   "         false -- count down                                                    \n"
   "      )                                                                         \n"
   "                                                                                \n"
   "      engine:AddObjectTimer(                                                    \n"
   "         selector,                                                              \n"
   "         minTrackOverlap,                                                       \n"
   "         timeBase,                                                              \n"
   "         updateTimeBase,                                                        \n"
   "         \"Object.Rating.\" .. positiveLabel ..                                 \n"
   "            \" <  Object.Rating.\" .. negativeLabel,                            \n"
   "         negativeTime,                                                          \n"
   "         0,    -- inital time                                                   \n"
   "         false -- count down                                                    \n"
   "      )                                                                         \n"
   "                                                                                \n"
   "      -- If the classification was more or less stable within the past          \n"
   "      -- it is accepted as correct and the appropriate attribute is set         \n"
   "      engine:AddBistableAttribute(                                              \n"
   "            selector,                                                           \n"
   "            minTrackOverlap,                                                    \n"
   "            attributeKey,                                                       \n"
   "            defaultValue,                                                       \n"
   "            \"Object.Rating.\" .. positiveTime .. \" > \" .. minHistoryTime ..  \n"
   "            \" and Object.Rating.\" .. positiveTime ..                          \n"
   "               \" > Object.Rating.\" .. negativeTime,                           \n"
   "            positiveLabel,                                                      \n"
   "            \"Object.Rating.\" .. negativeTime .. \" > \" .. minHistoryTime ..  \n"
   "            \" and Object.Rating.\" .. negativeTime ..                          \n"
   "               \" > Object.Rating.\" .. positiveTime,                           \n"
   "            negativeLabel                                                       \n"
   "      )                                                                         \n"
   "                                                                                \n"
   "      -- The Female and Male scores are filtered over time. The score is the    \n"
   "      -- ratio of Male/Female time and the sum of both times. The little        \n"
   "      -- regularization constants prevents a division of zero.                  \n"
   "      engine:AddObjectAccess(                                                   \n"
   "         selector,                                                              \n"
   "         [[                                                                     \n"
   "            pt = Object.Rating.]] .. positiveTime .. [[                         \n"
   "            nt = Object.Rating.]] .. negativeTime .. [[                         \n"
   "                                                                                \n"
   "            Object.Rating.]] .. positiveLabel ..                                \n"
   "               [[ = pt / ( pt + nt + 0.00001  )  * 100                          \n"
   "            Object.Rating.]] .. negativeLabel ..                                \n"
   "               [[ = nt / ( pt + nt + 0.00001 )  * 100                           \n"
   "            Object.Rating.]] .. positiveTime  .. [[ = nil                       \n"
   "            Object.Rating.]] .. negativeTime  .. [[ = nil                       \n"
   "         ]]                                                                     \n"
   "      )                                                                         \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   engine:AddObjectAccess(                                                      \n"
   "      selector,                                                                 \n"
   "      \"Object.Rating.\" .. identifier .. \" = nil\"                            \n"
   "   )                                                                            \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddAgeAnalyzer( engine, timeBase, updateTimeBase )                     \n"
   "   -- Only analyze \"Face.Front\" objects                                       \n"
   "   local selector = \"Object.Type == 'Face.Front'\"                             \n"
   "                                                                                \n"
   "   -- Model for happy analysis                                                  \n"
   "   local modelName = \"Age_28x28_2009_09_17_131241\"                            \n"
   "                                                                                \n"
   "   -- Identifier for the score to use                                           \n"
   "   local identifier          = \"Age\"                                          \n"
   "   local deviationIdentifier = \"AgeDeviation\"                                 \n"
   "                                                                                \n"
   "   -- Additional video parameters                                               \n"
   "   local minTrackOverlap     = 0.2                                              \n"
   "   local filterLength        = 3 -- seconds                                     \n"
   "   local stabilizerThreshold = 3 -- Min change in years for update              \n"
   "                                                                                \n"
   "   -- The identifiers of the used analyzer                                      \n"
   "   local hiddenRatings =                                                        \n"
   "   {                                                                            \n"
   "      \"ChildAgainstYoungAdultScore\",                                          \n"
   "      \"ChildAgainstAdultScore\",                                               \n"
   "      \"ChildAgainstSeniorScore\",                                              \n"
   "      \"TeenagerAgainstAdultScore\",                                            \n"
   "      \"TeenagerAgainstSeniorScore\",                                           \n"
   "      \"YoungAdultAgainstSeniorScore\"                                          \n"
   "   }                                                                            \n"
   "                                                                                \n"
   "   -- Ask for this model, maybe it can be load from file                        \n"
   "   RequireModel( modelName )                                                    \n"
   "                                                                                \n"
   "   -- Add the basic analysis step                                               \n"
   "   engine:AddAnalyzer( selector, modelName )                                    \n"
   "                                                                                \n"
   "   local regression =                                                           \n"
   "   [[                                                                           \n"
   "   p =                                                                          \n"
   "   {                                                                            \n"
   "      Object.Rating.]] .. table.concat( hiddenRatings,                          \n"
   "                                        \", Object.Rating.\" ) .. [[            \n"
   "   }                                                                            \n"
   "                                                                                \n"
   "   -- Add the age rating                                                        \n"
   "   Object.Rating.]] .. identifier .. [[ =                                       \n"
   "                                                                                \n"
   "   26.25834813297582 - 0.03398542701058983*p[1] +                               \n"
   "   0.00030939708738947363*p[1]*p[1] + 3.7973194735198807e-6*p[1]*p[1]*p[1] -    \n"
   "   0.08593892517874933*p[2] - 0.0007214440847450902*p[1]*p[2] +                 \n"
   "   1.6137937444028646e-6*p[1]*p[1]*p[2] + 0.0002817621732772484*p[2]*p[2] +     \n"
   "   1.7703899931999386e-6*p[1]*p[2]*p[2] + 3.906780376875867e-6*p[2]*p[2]*p[2] - \n"
   "   0.15753142440062912*p[3] - 0.00011130856685234601*p[1]*p[3] -                \n"
   "   8.771861255999555e-7*p[1]*p[1]*p[3] - 0.0012740358689134433*p[2]*p[3] -      \n"
   "   9.336561582089923e-6*p[1]*p[2]*p[3] + 2.5779779653818235e-6*p[2]*p[2]*p[3] - \n"
   "   0.00020011081988324927*p[3]*p[3] + 2.344179232376089e-6*p[1]*p[3]*p[3] -     \n"
   "   3.954626834176238e-6*p[2]*p[3]*p[3] + 1.7921307438365966e-6*p[3]*p[3]*p[3] + \n"
   "   0.010787518996077885*p[4] + 0.00035362198620105364*p[1]*p[4] -               \n"
   "   6.468063159004997e-6*p[1]*p[1]*p[4] + 0.00029964103220701143*p[2]*p[4] -     \n"
   "   4.878050762366782e-7*p[1]*p[2]*p[4] - 9.549089309582939e-6*p[2]*p[2]*p[4] -  \n"
   "   0.00005326404453024103*p[3]*p[4] + 0.000018662302656507002*p[1]*p[3]*p[4] +  \n"
   "   7.766521860881592e-6*p[2]*p[3]*p[4] -                                        \n"
   "   0.000014062016503944433*p[3]*p[3]*p[4] - 0.00016659429275962085*p[4]*p[4] -  \n"
   "   1.8518821216634928e-6*p[1]*p[4]*p[4] - 1.9610248663773733e-7*p[2]*p[4]*p[4] +\n"
   "   1.989475512730606e-6*p[3]*p[4]*p[4] + 1.451027225122485e-6*p[4]*p[4]*p[4] -  \n"
   "   0.045726575161021604*p[5] - 0.00039263932529793157*p[1]*p[5] -               \n"
   "   8.28119585497318e-6*p[1]*p[1]*p[5] + 0.000013103749289665199*p[2]*p[5] +     \n"
   "   0.0000193677264758667*p[1]*p[2]*p[5] -                                       \n"
   "   0.000014787623848140712*p[2]*p[2]*p[5] + 0.001316487022179716*p[3]*p[5] -    \n"
   "   7.197181830730259e-6*p[1]*p[3]*p[5] +                                        \n"
   "   0.000011258469730263253*p[2]*p[3]*p[5] +                                     \n"
   "   3.844277776323309e-6*p[3]*p[3]*p[5] - 0.00017830465336906123*p[4]*p[5] -     \n"
   "   7.387922798450229e-7*p[1]*p[4]*p[5] +                                        \n"
   "   0.000010364104600648695*p[2]*p[4]*p[5] +                                     \n"
   "   2.647921603872188e-6*p[3]*p[4]*p[5] - 3.965346101720004e-6*p[4]*p[4]*p[5] -  \n"
   "   0.00013822249941274731*p[5]*p[5] - 6.3577398803925845e-6*p[1]*p[5]*p[5] +    \n"
   "   3.6801319186434482e-6*p[2]*p[5]*p[5] - 6.363974832422622e-7*p[3]*p[5]*p[5] - \n"
   "   5.79007029306541e-6*p[4]*p[5]*p[5] + 4.588858856456545e-6*p[5]*p[5]*p[5] -   \n"
   "   0.048130566929281006*p[6] - 0.00005115076434766916*p[1]*p[6] +               \n"
   "   7.471066321022001e-6*p[1]*p[1]*p[6] + 0.00010825827061350972*p[2]*p[6] -     \n"
   "   0.000010875885405470782*p[1]*p[2]*p[6] +                                     \n"
   "   0.000011782757750828166*p[2]*p[2]*p[6] + 0.00017340738895029218*p[3]*p[6] -  \n"
   "   4.8780822686185225e-6*p[1]*p[3]*p[6] - 3.330221622365936e-6*p[2]*p[3]*p[6] - \n"
   "   1.316676537724814e-7*p[3]*p[3]*p[6] + 0.00006491656640931562*p[4]*p[6] -     \n"
   "   3.878611989587288e-6*p[1]*p[4]*p[6] - 3.822238484404569e-6*p[2]*p[4]*p[6] +  \n"
   "   5.955871214491924e-6*p[3]*p[4]*p[6] - 3.2311340523530856e-7*p[4]*p[4]*p[6] + \n"
   "   0.0001300670591826367*p[5]*p[6] + 8.687574295568208e-6*p[1]*p[5]*p[6] -      \n"
   "   8.431350287050582e-6*p[2]*p[5]*p[6] - 4.642067329780327e-6*p[3]*p[5]*p[6] +  \n"
   "   6.924637219680254e-6*p[4]*p[5]*p[6] - 5.090186193899461e-6*p[5]*p[5]*p[6] +  \n"
   "   0.000022220688298577992*p[6]*p[6] - 3.940696386365866e-7*p[1]*p[6]*p[6] -    \n"
   "   1.0962668883965573e-7*p[2]*p[6]*p[6] + 2.9081726877265087e-6*p[3]*p[6]*p[6] -\n"
   "   2.743090828207472e-6*p[4]*p[6]*p[6] + 3.7083924800671915e-6*p[5]*p[6]*p[6] - \n"
   "   4.923444810402835e-7*p[6]*p[6]*p[6]                                          \n"
   "                                                                                \n"
   "   if Object.Rating.]] .. identifier .. [[ < 0 then                             \n"
   "      Object.Rating.]] .. identifier .. [[ = 0                                  \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Add the deviation rating                                                  \n"
   "   Object.Rating.]] .. deviationIdentifier .. [[ =                              \n"
   "   math.abs(                                                                    \n"
   "   11.66910696374289 + 0.0072540124813574944*p[1] -                             \n"
   "   0.00029851034956854467*p[1]*p[1] - 4.170063128305435e-7*p[1]*p[1]*p[1] +     \n"
   "   0.028606500892683774*p[2] + 0.000023099918379543302*p[1]*p[2] -              \n"
   "   1.511238802223004e-6*p[1]*p[1]*p[2] - 0.00012222726262869*p[2]*p[2] -        \n"
   "   1.0890582175798627e-6*p[1]*p[2]*p[2] - 1.1607443821782295e-7*p[2]*p[2]*p[2] -\n"
   "   0.01078154949631522*p[3] + 0.00023832860826422685*p[1]*p[3] +                \n"
   "   6.774242116062913e-7*p[1]*p[1]*p[3] - 0.0003360792369717911*p[2]*p[3] -      \n"
   "   2.1789626722957123e-7*p[1]*p[2]*p[3] - 2.0077576601783993e-6*p[2]*p[2]*p[3] -\n"
   "   0.00020790942280086573*p[3]*p[3] - 4.5317180613691606e-7*p[1]*p[3]*p[3] +    \n"
   "   4.3213197502044495e-6*p[2]*p[3]*p[3] - 5.452665311238187e-6*p[3]*p[3]*p[3] - \n"
   "   0.009996961013185274*p[4] - 0.0002797379787777379*p[1]*p[4] -                \n"
   "   7.348367024425316e-6*p[1]*p[1]*p[4] + 0.0001694128462860908*p[2]*p[4] +      \n"
   "   0.00001213184268641952*p[1]*p[2]*p[4] -                                      \n"
   "   0.000010272068715434217*p[2]*p[2]*p[4] + 0.00010915414436504346*p[3]*p[4] +  \n"
   "   7.66442735691289e-7*p[1]*p[3]*p[4] + 2.781088759285535e-6*p[2]*p[3]*p[4] +   \n"
   "   1.506916338069751e-6*p[3]*p[3]*p[4] + 0.00004684794200064857*p[4]*p[4] -     \n"
   "   2.679135177283016e-6*p[1]*p[4]*p[4] + 2.6722176035054657e-6*p[2]*p[4]*p[4] + \n"
   "   2.546865967691355e-7*p[3]*p[4]*p[4] + 2.70368588970226e-7*p[4]*p[4]*p[4] -   \n"
   "   0.03484574229847804*p[5] + 0.0001585249349600465*p[1]*p[5] +                 \n"
   "   5.222621907076528e-6*p[1]*p[1]*p[5] - 0.00021248380498718817*p[2]*p[5] -     \n"
   "   3.635258629475026e-6*p[1]*p[2]*p[5] + 2.641008410063702e-6*p[2]*p[2]*p[5] -  \n"
   "   0.000034705889486085096*p[3]*p[5] - 3.3907011394386042e-6*p[1]*p[3]*p[5] -   \n"
   "   0.000012715303143293309*p[2]*p[3]*p[5] +                                     \n"
   "   0.000010071911708755216*p[3]*p[3]*p[5] + 2.9612903214603114e-6*p[4]*p[5] +   \n"
   "   2.6633103581393357e-6*p[1]*p[4]*p[5] + 3.752003230381219e-6*p[2]*p[4]*p[5] - \n"
   "   4.4331562474976255e-6*p[3]*p[4]*p[5] + 1.2940908989530589e-6*p[4]*p[4]*p[5] +\n"
   "   0.00020750881597949016*p[5]*p[5] - 1.3795830114558634e-6*p[1]*p[5]*p[5] +    \n"
   "   3.674909364269141e-6*p[2]*p[5]*p[5] - 3.677334425280199e-7*p[3]*p[5]*p[5] -  \n"
   "   3.306903740686438e-6*p[4]*p[5]*p[5] + 1.4661922241791756e-6*p[5]*p[5]*p[5] - \n"
   "   0.024997511837191125*p[6] + 0.00002532296109475324*p[1]*p[6] +               \n"
   "   2.0092644078792597e-6*p[1]*p[1]*p[6] + 0.00007546748061906312*p[2]*p[6] -    \n"
   "   4.38622362544626e-6*p[1]*p[2]*p[6] + 7.802332300781497e-6*p[2]*p[2]*p[6] -   \n"
   "   3.0679323974129404e-6*p[3]*p[6] - 5.585353669576179e-7*p[1]*p[3]*p[6] -      \n"
   "   3.895810030686121e-7*p[2]*p[3]*p[6] + 2.3024391628579754e-7*p[3]*p[3]*p[6] - \n"
   "   0.000039367818552489026*p[4]*p[6] + 8.43244562273389e-7*p[1]*p[4]*p[6] -     \n"
   "   1.8516189659672336e-6*p[2]*p[4]*p[6] + 4.437694833982883e-7*p[3]*p[4]*p[6] - \n"
   "   1.814585816592062e-6*p[4]*p[4]*p[6] - 0.00025004531493267576*p[5]*p[6] +     \n"
   "   1.005483953175278e-6*p[1]*p[5]*p[6] - 4.140576784100047e-6*p[2]*p[5]*p[6] -  \n"
   "   1.2459351039466982e-6*p[3]*p[5]*p[6] + 2.72904366290284e-6*p[4]*p[5]*p[6] -  \n"
   "   6.485239304532996e-7*p[5]*p[5]*p[6] + 0.00010148212358758524*p[6]*p[6] +     \n"
   "   8.87545329848593e-8*p[1]*p[6]*p[6] - 1.7546514086443537e-7*p[2]*p[6]*p[6] +  \n"
   "   1.0568624923457477e-6*p[3]*p[6]*p[6] + 3.457787217122104e-7*p[4]*p[6]*p[6] + \n"
   "   1.0640695632790551e-6*p[5]*p[6]*p[6] - 4.3795768229358865e-7*p[6]*p[6]*p[6]  \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Remove the hidden rating                                                  \n"
   "   Object.Rating.]] .. table.concat( hiddenRatings,                             \n"
   "                                     \" = nil; Object.Rating.\" ) .. [[ = nil   \n"
   "   ]]                                                                           \n"
   "                                                                                \n"
   "   engine:AddObjectAccess( selector, regression )                               \n"
   "                                                                                \n"
   "   if timeBase > 0.0 then                                                       \n"
   "      -- In the video mode do a simple filtering over time and stablize the     \n"
   "      -- rating.                                                                \n"
   "                                                                                \n"
   "      -- For the age                                                            \n"
   "      engine:AddRatingFilter(                                                   \n"
   "         selector,                                                              \n"
   "         minTrackOverlap,                                                       \n"
   "         timeBase,                                                              \n"
   "         updateTimeBase,                                                        \n"
   "         filterLength,                                                          \n"
   "         identifier                                                             \n"
   "      )                                                                         \n"
   "                                                                                \n"
   "      engine:AddRatingStabilizer(                                               \n"
   "         selector,                                                              \n"
   "         minTrackOverlap,                                                       \n"
   "         identifier,                                                            \n"
   "         stabilizerThreshold                                                    \n"
   "      )                                                                         \n"
   "                                                                                \n"
   "      -- For the deviation                                                      \n"
   "      engine:AddRatingFilter(                                                   \n"
   "         selector,                                                              \n"
   "         minTrackOverlap,                                                       \n"
   "         timeBase,                                                              \n"
   "         updateTimeBase,                                                        \n"
   "         filterLength,                                                          \n"
   "         deviationIdentifier                                                    \n"
   "      )                                                                         \n"
   "                                                                                \n"
   "      engine:AddRatingStabilizer(                                               \n"
   "         selector,                                                              \n"
   "         minTrackOverlap,                                                       \n"
   "         deviationIdentifier,                                                   \n"
   "         stabilizerThreshold                                                    \n"
   "      )                                                                         \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Copy the rating to an attribute and delete the hidden identifiers.        \n"
   "   engine:AddObjectAccess(                                                      \n"
   "      selector,                                                                 \n"
   "      [[                                                                        \n"
   "         Object.Rating.]] .. identifier .. [[ =                                 \n"
   "            math.floor( Object.Rating.]] .. identifier .. [[ + 0.5 )            \n"
   "                                                                                \n"
   "         Object.Rating.]] .. deviationIdentifier .. [[ =                        \n"
   "            math.floor( Object.Rating.]] .. deviationIdentifier .. [[ + 0.5 )   \n"
   "      ]]                                                                        \n"
   "   )                                                                            \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddHappyAnalyzer( engine, timeBase, updateTimeBase )                   \n"
   "   -- Only analyze \"Face.Front\" objects                                       \n"
   "   local selector = \"Object.Type == 'Face.Front'\"                             \n"
   "                                                                                \n"
   "   -- Model for happy analysis                                                  \n"
   "   local modelName = \"Happy_26x26_2008_09_08_124526\"                          \n"
   "                                                                                \n"
   "   -- Identifier for the score to use                                           \n"
   "   local identifier = \"HappyScore\"                                            \n"
   "                                                                                \n"
   "   -- Use the helper function                                                   \n"
   "   AddAnalyzer(                                                                 \n"
   "      engine,                                                                   \n"
   "      timeBase,                                                                 \n"
   "      updateTimeBase,                                                           \n"
   "      modelName,          -- Model name                                         \n"
   "      selector,           -- Object selector                                    \n"
   "      identifier,         -- Identifier                                         \n"
   "      0.4,                -- Length of the filter                               \n"
   "      0.04,               -- Stabilizer threshold in %                          \n"
   "      -30, 60,            -- Modifier sourceA, sourceB                          \n"
   "      Config.Happy.MinShift,                                                    \n"
   "      Config.Happy.MaxShift                                                     \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Delete the HappyScore form object. Its only for internal use.             \n"
   "   -- Copy the score the normale rating, if the score is used.                  \n"
   "   if identifier == \"HappyScore\" then                                         \n"
   "      access =                                                                  \n"
   "      [[                                                                        \n"
   "         Object.Rating.Happy = Object.Rating.HappyScore                         \n"
   "         Object.Rating.HappyScore = nil                                         \n"
   "      ]]                                                                        \n"
   "   else                                                                         \n"
   "      access =                                                                  \n"
   "      [[                                                                        \n"
   "         Object.Rating.HappyScore = nil                                         \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   engine:AddObjectAccess( selector, access )                                   \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddSadAnalyzer( engine, timeBase, updateTimeBase )                     \n"
   "   -- Only analyze \"Face.Front\" objects                                       \n"
   "   local selector = \"Object.Type == 'Face.Front'\"                             \n"
   "                                                                                \n"
   "   -- Model for sad analysis                                                    \n"
   "   local modelName = \"Sad_26x26_2008_10_21_161703\"                            \n"
   "                                                                                \n"
   "   -- Identifier for the score to use                                           \n"
   "   local identifier = \"SadScore\"                                              \n"
   "                                                                                \n"
   "   -- Use the helper function                                                   \n"
   "   AddAnalyzer(                                                                 \n"
   "      engine,                                                                   \n"
   ) + std::string(
   "      timeBase,                                                                 \n"
   "      updateTimeBase,                                                           \n"
   "      modelName,          -- Model name                                         \n"
   "      selector,           -- Object selector                                    \n"
   "      identifier,         -- Identifier                                         \n"
   "      0.4,                -- Length of the filter                               \n"
   "      0.04,               -- Stabilizer threshold in %                          \n"
   "      70, 150,            -- Modifier sourceA, sourceB                          \n"
   "      Config.Sad.MinShift,                                                      \n"
   "      Config.Sad.MaxShift                                                       \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Delete the SadScore form the object. Its only for internal use.           \n"
   "   -- Copy the score the normale rating, if the score is used.                  \n"
   "   if identifier == \"SadScore\" then                                           \n"
   "      access =                                                                  \n"
   "      [[                                                                        \n"
   "         Object.Rating.Sad = Object.Rating.SadScore                             \n"
   "         Object.Rating.SadScore = nil                                           \n"
   "      ]]                                                                        \n"
   "   else                                                                         \n"
   "      access =                                                                  \n"
   "      [[                                                                        \n"
   "         Object.Rating.SadScore = nil                                           \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   engine:AddObjectAccess( selector, access )                                   \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddSurprisedAnalyzer( engine, timeBase, updateTimeBase )               \n"
   "   -- Only analyze \"Face.Front\" objects                                       \n"
   "   local selector = \"Object.Type == 'Face.Front'\"                             \n"
   "                                                                                \n"
   "   -- Model for surprised analysis                                              \n"
   "   local modelName = \"Surprised_26x26_2008_09_11_175815\"                      \n"
   "                                                                                \n"
   "   -- Identifier for the score to use                                           \n"
   "   local identifier = \"SurprisedScore\"                                        \n"
   "                                                                                \n"
   "   -- Use the helper function                                                   \n"
   "   AddAnalyzer(                                                                 \n"
   "      engine,                                                                   \n"
   "      timeBase,                                                                 \n"
   "      updateTimeBase,                                                           \n"
   "      modelName,          -- Model name                                         \n"
   "      selector,           -- Object selector                                    \n"
   "      identifier,         -- Identifier                                         \n"
   "      0.4,                -- Length of the filter                               \n"
   "      0.04,               -- Stabilizer threshold in %                          \n"
   "      0, 50,              -- Modifier sourceA, sourceB                          \n"
   "      Config.Surprised.MinShift,                                                \n"
   "      Config.Surprised.MaxShift                                                 \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Delete the SurprisedScore form the object. Its only for internal use.     \n"
   "   -- Copy the score the normale rating, if the score is used.                  \n"
   "   if identifier == \"SurprisedScore\" then                                     \n"
   "      access =                                                                  \n"
   "      [[                                                                        \n"
   "         Object.Rating.Surprised = Object.Rating.SurprisedScore                 \n"
   "         Object.Rating.SurprisedScore = nil                                     \n"
   "      ]]                                                                        \n"
   "   else                                                                         \n"
   "      access =                                                                  \n"
   "      [[                                                                        \n"
   "         Object.Rating.SurprisedScore = nil                                     \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   engine:AddObjectAccess( selector, access )                                   \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddAngryAnalyzer( engine, timeBase, updateTimeBase )                   \n"
   "   -- Only analyze \"Face.Front\" objects                                       \n"
   "   local selector = \"Object.Type == 'Face.Front'\"                             \n"
   "                                                                                \n"
   "   -- Model for angry analysis                                                  \n"
   "   local modelName = \"Angry_26x26_2008_10_21_152601\"                          \n"
   "                                                                                \n"
   "   -- Identifier for the score to use                                           \n"
   "   local identifier = \"AngryScore\"                                            \n"
   "                                                                                \n"
   "   -- Use the helper function                                                   \n"
   "   AddAnalyzer(                                                                 \n"
   "      engine,                                                                   \n"
   "      timeBase,                                                                 \n"
   "      updateTimeBase,                                                           \n"
   "      modelName,          -- Model name                                         \n"
   "      selector,           -- Object selector                                    \n"
   "      identifier,         -- Identifier                                         \n"
   "      0.4,                -- Length of the filter                               \n"
   "      0.04,               -- Stabilizer threshold in %                          \n"
   "      10, 100,            -- Modifier sourceA, sourceB                          \n"
   "      Config.Angry.MinShift,                                                    \n"
   "      Config.Angry.MaxShift                                                     \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Delete the AngryScore form the object. Its only for internal use.         \n"
   "   -- Copy the score the normale rating, if the score is used.                  \n"
   "   if identifier == \"AngryScore\" then                                         \n"
   "      access =                                                                  \n"
   "      [[                                                                        \n"
   "         Object.Rating.Angry = Object.Rating.AngryScore                         \n"
   "         Object.Rating.AngryScore = nil                                         \n"
   "      ]]                                                                        \n"
   "   else                                                                         \n"
   "      access =                                                                  \n"
   "      [[                                                                        \n"
   "         Object.Rating.AngryScore = nil                                         \n"
   "      ]]                                                                        \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   engine:AddObjectAccess( selector, access )                                   \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddIdentification( engine, gallery )                                   \n"
   "   local selector      = \"Object.Type == 'Face.Front'\"                        \n"
   "   local modelName     = \"FaceFrontIdent_36x45_2008_07_18_123318\"             \n"
   "   local enrollSamples = false                                                  \n"
   "   local minScore      = -10000                                                 \n"
   "   local maxIdentities = 5                                                      \n"
   "   local identityKey   = \"Identity\"                                           \n"
   "                                                                                \n"
   "   RequireModel( modelName )                                                    \n"
   "                                                                                \n"
   "   engine:AddIdentification(                                                    \n"
   "      selector,                                                                 \n"
   "      modelName,                                                                \n"
   "      gallery,                                                                  \n"
   "      enrollSamples,                                                            \n"
   "      minScore,                                                                 \n"
   "      maxIdentities,                                                            \n"
   "      identityKey,                                                              \n"
   "      identityKey                                                               \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   for i = 0, maxIdentities - 1 do                                              \n"
   "      engine:AddRatingModifier(                                                 \n"
   "         selector,                                                              \n"
   "         identityKey .. \"_\" .. tostring( i ),                                 \n"
   "         -8000, -4500,                                                          \n"
   "         0, 100,                                                                \n"
   "         true                                                                   \n"
   "      )                                                                         \n"
   "   end                                                                          \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddObjectScanner( engine,                                              \n"
   "                           timeBase,                                            \n"
   "                           updateTimeBase,                                      \n"
   "                           threadCount,                                         \n"
   "                           minSize,                                             \n"
   "                           minScore,                                            \n"
   "                           trackFaces,                                          \n"
   "                           trackingType,                                        \n"
   "                           phantomTrap,                                         \n"
   "                           modelType )                                          \n"
   "                                                                                \n"
   "   -- Single image and video parameters                                         \n"
   "   local modelName       = ModelType[modelType].ModelName                       \n"
   "   local objectSelector  = ModelType[modelType].ObjectSelector                  \n"
   "   local combThreshold   = ModelType[modelType].CombThreshold                   \n"
   "   local regionLeft      = 0.0                -- Region for scanning            \n"
   "   local regionTop       = 0.0                                                  \n"
   "   local regionRight     = 1.0                                                  \n"
   "   local regionBottom    = 1.0                                                  \n"
   "   local maxSize         = 1.0                                                  \n"
   "   local scaleFactor     = 1.24               -- Scaling factor of pyramid      \n"
   "   local useObjectMerger = true               -- Merge multiple detections      \n"
   "   local minMergeOverlap = 0.6                -- before thinning them out?      \n"
   "   local maxCoverage     = 0.2                -- Object thinner parameter       \n"
   "                                                                                \n"
   "   -- Additional video parameters                                               \n"
   "   local trackMargin       = 0.5              -- Tracking margin for objects    \n"
   "   local useVideoSlicing   = true                                               \n"
   "   local slicingHistory    = 0.3              -- How long are objects tracked   \n"
   "   local useMotionFilter   = true                                               \n"
   "   local useStabilizer     = true             -- Stabilize jittering objects    \n"
   "   local stabilizerOverlap = 0.95                                               \n"
   "   local minTrackOverlap   = 0.2                                                \n"
   "   local minValidationTime = 0.3              -- Min uptime time for validation \n"
   "   local filterLength      = 0.3                                                \n"
   "                                                                                \n"
   "   local scanner           = nil              -- Temporary scanner handle       \n"
   "                                                                                \n"
   "   local memoryRatingKey   = \"Memory\"         -- Key of internal object memory\n"
   "                                                                                \n"
   "   -- Ask for this model, maybe it can be load from file                        \n"
   "   RequireModel( modelName )                                                    \n"
   "                                                                                \n"
   "   -- Check which scanner is needed and ask the engine for the right one        \n"
   "   -- timeBase > 0 indicates the video mode                                     \n"
   "   if timeBase > 0 and useVideoSlicing == true then                             \n"
   "      scanner =                                                                 \n"
   "         engine:GetSlicedPyramidScanner(                                        \n"
   "            engine:GetHoneycombScanner(                                         \n"
   "               modelName,                                                       \n"
   "               \"6x5\",                                                         \n"
   "               combThreshold                                                    \n"
   "            ),                                                                  \n"
   "            scaleFactor,                                                        \n"
   "            timeBase,                                                           \n"
   "            updateTimeBase,                                                     \n"
   "            slicingHistory,                                                     \n"
   "            trackMargin,                                                        \n"
   "            trackMargin,                                                        \n"
   "            trackMargin,                                                        \n"
   "            trackMargin,                                                        \n"
   "            threadCount                                                         \n"
   "         )                                                                      \n"
   "   else                                                                         \n"
   "      scanner =                                                                 \n"
   "         engine:GetPyramidScanner(                                              \n"
   "            engine:GetHoneycombScanner(                                         \n"
   "               modelName,                                                       \n"
   "               \"6x5\",                                                         \n"
   "               combThreshold                                                    \n"
   "            ),                                                                  \n"
   "            scaleFactor,                                                        \n"
   "            threadCount                                                         \n"
   "         )                                                                      \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Use the requested scanner in the image scanner module                     \n"
   "   engine:AddImageScanner(                                                      \n"
   "      regionLeft,                                                               \n"
   "      regionTop,                                                                \n"
   "      regionRight,                                                              \n"
   "      regionBottom,                                                             \n"
   "      minSize,                                                                  \n"
   "      maxSize,                                                                  \n"
   "      scanner                                                                   \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Need merging?                                                             \n"
   "   if useObjectMerger == true then                                              \n"
   "      engine:AddObjectMerger(                                                   \n"
   "         objectSelector,                                                        \n"
   "         minMergeOverlap,                                                       \n"
   "         \"Score\"                                                              \n"
   "      )                                                                         \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Now thin out multiple detections                                          \n"
   "   engine:AddObjectThinner(                                                     \n"
   "      objectSelector,                                                           \n"
   "      maxCoverage,                                                              \n"
   "      \"Score\"                                                                 \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Remove objects which have a score below the threshold                     \n"
   "   engine:AddObjectEraser(                                                      \n"
   "      objectSelector .. \" and Object.Rating.Score < \" .. minScore             \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Add additional video modules in video mode ( timeBase > 0 )               \n"
   "   if timeBase > 0 then                                                         \n"
   "      -- Filter the score of the model                                          \n"
   "      engine:AddRatingFilter(                                                   \n"
   "         objectSelector,                                                        \n"
   "         minTrackOverlap,                                                       \n"
   "         timeBase,                                                              \n"
   "         updateTimeBase,                                                        \n"
   "         filterLength,                                                          \n"
   "         \"Score\"                                                              \n"
   "      )                                                                         \n"
   "                                                                                \n"
   "      -- Measure the uptime of the faces                                        \n"
   "      engine:AddObjectTimer(                                                    \n"
   "         objectSelector,                                                        \n"
   "         minTrackOverlap,                                                       \n"
   "         timeBase,                                                              \n"
   "         updateTimeBase,                                                        \n"
   "         \"true\",                                                              \n"
   "         \"Uptime\",                                                            \n"
   "         0.0,                                                                   \n"
   "         false                                                                  \n"
   "      )                                                                         \n"
   "                                                                                \n"
   "      -- Let only the faces survive which have been detected for a while        \n"
   "      engine:AddObjectEraser(                                                   \n"
   "         objectSelector .. \" and Object.Rating.Uptime < \" .. minValidationTime\n"
   "      )                                                                         \n"
   "                                                                                \n"
   "      -- Faces are classified and deleted or just marked - depending on the mode\n"
   "      if phantomTrap ~= 'Off' then                                              \n"
   "         AddPhantomTrap( engine,                                                \n"
   "                         objectSelector,                                        \n"
   "                         timeBase,                                              \n"
   "                         updateTimeBase,                                        \n"
   "                         phantomTrap )                                          \n"
   "      end                                                                       \n"
   "                                                                                \n"
   "      -- Try to track lost faces                                                \n"
   "      if trackFaces == true then                                                \n"
   "         AddObjectTracker( engine, timeBase, updateTimeBase, modelType )        \n"
   "                                                                                \n"
   "         -- Overwrite the uptime of tracked faces starting with                 \n"
   "         -- minValidationTime, because of the eraser above!                     \n"
   "         engine:AddObjectTimer(                                                 \n"
   "            objectSelector,                                                     \n"
   "            minTrackOverlap,                                                    \n"
   "            timeBase,                                                           \n"
   "            updateTimeBase,                                                     \n"
   "            \"true\",                                                           \n"
   "            \"Uptime\",                                                         \n"
   "            minValidationTime, -- This is the initial time!                     \n"
   "            false                                                               \n"
   "         )                                                                      \n"
   "      end                                                                       \n"
   "                                                                                \n"
   "      -- Filter the object positions                                            \n"
   "      if useMotionFilter == true then                                           \n"
   "         engine:AddMotionFilter(                                                \n"
   "            objectSelector,                                                     \n"
   "            minTrackOverlap,                                                    \n"
   "            timeBase,                                                           \n"
   "            updateTimeBase                                                      \n"
   "         )                                                                      \n"
   "      end                                                                       \n"
   "                                                                                \n"
   "      -- Remove the remaining jitter from the object positions                  \n"
   "      if useStabilizer == true then                                             \n"
   "         engine:AddObjectStabilizer(                                            \n"
   "            objectSelector,                                                     \n"
   "            stabilizerOverlap,                                                  \n"
   "            true    -- Stabilize only the region                                \n"
   "         )                                                                      \n"
   "      end                                                                       \n"
   "                                                                                \n"
   "      -- Change the object properties for tracked faces                         \n"
   "      if trackFaces == true then                                                \n"
   "         engine:AddObjectAccess(                                                \n"
   "            \"Object.Rating.Tracking ~= nil\",                                  \n"
   "            [[                                                                  \n"
   "               Object.Type = \"]] .. trackingType .. [[\"                       \n"
   "               Object.Marker = {}                                               \n"
   "            ]]                                                                  \n"
   "         )                                                                      \n"
   "      end                                                                       \n"
   "   end                                                                          \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddPartScanner( engine,                                                \n"
   "                         timeBase,                                              \n"
   "                         updateTimeBase,                                        \n"
   "                         threadCount,                                           \n"
   "                         regionLeft,                                            \n"
   "                         regionTop,                                             \n"
   "                         regionRight,                                           \n"
   "                         regionBottom,                                          \n"
   "                         minSize,                                               \n"
   "                         maxSize,                                               \n"
   "                         minScore,                                              \n"
   "                         scaleFactor,                                           \n"
   "                         objectType,                                            \n"
   "                         partModel,                                             \n"
   "                         partType,                                              \n"
   "                         partKey,                                               \n"
   "                         combThreshold )                                        \n"
   "   -- Single image and video parameters                                         \n"
   "   local scoreKey          = \"Score\"                                          \n"
   "   local objectSelector    = \"Object.Type == '\" .. objectType .. \"'\"        \n"
   "   local partSelector      = \"Object.Type == '\" .. partType   .. \"'\"        \n"
   "   local useObjectMerger   = true         -- Merge multiple detections before   \n"
   "   local minMergeOverlap   = 0.6          -- thinning them out?                 \n"
   "   local maxCoverage       = 0.2                                                \n"
   "                                                                                \n"
   "   -- Additional video parameters                                               \n"
   "   local useMotionFilter   = true                                               \n"
   "   local minTrackOverlap   = 0.2                                                \n"
   "   local filterLength      = 0.3                                                \n"
   "                                                                                \n"
   "   -- Ask for this model, maybe it can be load from file                        \n"
   "   RequireModel( partModel )                                                    \n"
   "                                                                                \n"
   "   -- Add a part scanner for detection of the part                              \n"
   "   engine:AddPartScanner(                                                       \n"
   "      objectSelector,                                                           \n"
   "      regionLeft,                                                               \n"
   "      regionTop,                                                                \n"
   "      regionRight,                                                              \n"
   "      regionBottom,                                                             \n"
   "      minSize,                                                                  \n"
   "      maxSize,                                                                  \n"
   "      engine:GetPyramidScanner(                                                 \n"
   "         engine:GetHoneycombScanner(                                            \n"
   "            partModel,                                                          \n"
   "            \"4x3\",                                                            \n"
   "            combThreshold                                                       \n"
   "         ),                                                                     \n"
   "         scaleFactor,                                                           \n"
   "         threadCount                                                            \n"
   "      )                                                                         \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Need merging?                                                             \n"
   "   if useObjectMerger == true then                                              \n"
   "      engine:AddObjectMerger(                                                   \n"
   "         partSelector,                                                          \n"
   "         minMergeOverlap,                                                       \n"
   "         scoreKey                                                               \n"
   "      )                                                                         \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Now thin out multiple detections                                          \n"
   "   engine:AddObjectThinner(                                                     \n"
   "      partSelector,                                                             \n"
   "      maxCoverage,                                                              \n"
   "      scoreKey                                                                  \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Remove objects which have a score below the threshold                     \n"
   "   engine:AddObjectEraser(                                                      \n"
   "      partSelector .. \" and Object.Rating.Score < \" .. minScore               \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- In video mode                                                             \n"
   "   if timeBase > 0 then                                                         \n"
   "                                                                                \n"
   "      -- Filter the score of the model                                          \n"
   "      engine:AddRatingFilter(                                                   \n"
   "         objectSelector,                                                        \n"
   "         minTrackOverlap,                                                       \n"
   "         timeBase,                                                              \n"
   "         updateTimeBase,                                                        \n"
   "         filterLength,                                                          \n"
   "         \"Score\"                                                              \n"
   "      )                                                                         \n"
   "                                                                                \n"
   "      -- Add a motion filter if desired                                         \n"
   "      if useMotionFilter == true then                                           \n"
   "         engine:AddMotionFilter(                                                \n"
   "            partSelector,                                                       \n"
   "            minTrackOverlap,                                                    \n"
   "            timeBase,                                                           \n"
   "            updateTimeBase                                                      \n"
   "         )                                                                      \n"
   "      end                                                                       \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Now let the detected part be part of the object                           \n"
   "   engine:AddPartFusion(                                                        \n"
   "      objectSelector,           -- This is the destination object               \n"
   "      regionLeft,                                                               \n"
   "      regionTop,                                                                \n"
   "      regionRight,                                                              \n"
   "      regionBottom,                                                             \n"
   "      minSize,                                                                  \n"
   "      maxSize,                                                                  \n"
   "      partSelector,                                                             \n"
   "      scoreKey,                                                                 \n"
   "      partKey                                                                   \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Now remove the remaining detections which cannot be assigned as           \n"
   "   -- a part to an object.                                                      \n"
   "   engine:AddObjectEraser(                                                      \n"
   "      partSelector                                                              \n"
   "   )                                                                            \n"
   "end                                                                             \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddPhantomTrap( engine, selector, timebase, updateTimeBase, mode )     \n"
   "                                                                                \n"
   "   local modelName  = \"Tracking_36x36_2008_08_21_110315\"                      \n"
   "   local patchCount = \"PatchCount\"                                            \n"
   "   local minOverlap = 0.3                                                       \n"
   "                                                                                \n"
   "   RequireModel( modelName )                                                    \n"
   "                                                                                \n"
   "   heuristic =                                                                  \n"
   "   [[                                                                           \n"
   "                                                                                \n"
   "   -- parameters which control this module                                      \n"
   "   memoryLength   = 30  -- seconds a sample is alive without re-detection       \n"
   "   minMatch       = 10  -- threshold for the texture comparison                 \n"
   "   thresholdScore = 85  -- threshold for a sample to be recognized as a face    \n"
   "   phantomToggle  =  5  -- toggles needed for a sample to become a phantom      \n"
   "   velOverlap     = 0.2 -- the movement we allow for a pha smp ow it becomes a face\n"
   "                                                                                \n"
   "   -- internal parameters, can't be seen outside except in debug mode           \n"
   "   mode     = '$Mode'   -- values: 'Debug', 'Mark', 'Delete'                    \n"
   "   UNKNOWN  = \"unknown\"                                                       \n"
   "   FACE     = \"face\"                                                          \n"
   "   PHANTOM  = \"phantom\"                                                       \n"
   "   priority = { [FACE] = 2, [PHANTOM] = 1, [UNKNOWN] = 0 }                      \n"
   "                                                                                \n"
   "   samples  = samples or {}                                                     \n"
   "                                                                                \n"
   "                                                                                \n"
   "   --===========================================================================\n"
   "   -- an object which has no reference to an sample will be added as a new      \n"
   "   -- sample in the next round                                                  \n"
   "   function AddNewSamples( objects, samples )                                   \n"
   "      for k, o in ipairs( objects ) do                                          \n"
   "         if #o.Matches == 0 then                                                \n"
   "            local s = Sample( o )                                               \n"
   "            table.insert( samples,   s )                                        \n"
   "         end                                                                    \n"
   "      end                                                                       \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   --===========================================================================\n"
   "   -- calculates the Overlap of the regions ar and br                           \n"
   "   function CalcOverlap( ar, br )                                               \n"
   "      local a = 0.0                                                             \n"
   "                                                                                \n"
   "      if not( ar.Left   > br.Right or br.Left   > ar.Right or                   \n"
   "              ar.Bottom < br.Top   or br.Bottom < ar.Top ) then                 \n"
   "                                                                                \n"
   "         local xl = math.max( ar.Left,   br.Left )                              \n"
   "         local xt = math.max( ar.Top,    br.Top )                               \n"
   "         local xr = math.min( ar.Right,  br.Right )                             \n"
   "         local xb = math.min( ar.Bottom, br.Bottom )                            \n"
   "                                                                                \n"
   "         local ra = ( ar.Right - ar.Left ) * ( ar.Bottom - ar.Top );            \n"
   "         local rb = ( br.Right - br.Left ) * ( br.Bottom - br.Top );            \n"
   "         local rx = ( xr - xl ) * ( xb - xt );                                  \n"
   "                                                                                \n"
   "         a  = ( rx + rx ) / ( ra + rb );                                        \n"
   "      end                                                                       \n"
   "                                                                                \n"
   "      return a                                                                  \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   --===========================================================================\n"
   "   -- classifies an object into UNKNOWN, PHANTOM or FACE                        \n"
   "   function ClassifyObjects( objects )                                          \n"
   "      for k, o in ipairs( objects ) do                                          \n"
   "         o.Class = UNKNOWN                                                      \n"
   "         for l, s in ipairs( o.Matches ) do                                     \n"
   "            if s.Class == FACE then                                             \n"
   "               o.Class = FACE                                                   \n"
   "               break                                                            \n"
   "            elseif s.Class == PHANTOM then                                      \n"
   "               o.Class = PHANTOM                                                \n"
   "            end                                                                 \n"
   "         end                                                                    \n"
   "         o.Attribute.Class = o.Class                                            \n"
   "      end                                                                       \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   --===========================================================================\n"
   "   -- used during 'Delete' mode. Phantoms are deleted, no attribute is set      \n"
   "   function CleanUpDelete( objects )                                            \n"
   "      local ret = {}                                                            \n"
   "      for i, o in ipairs( objects ) do                                          \n"
   "         if o.Class ~= PHANTOM then                                             \n"
   "            o.Attribute.Class = nil                                             \n"
   "            table.insert( ret, o )                                              \n"
   "         end                                                                    \n"
   "      end                                                                       \n"
   "      return ret                                                                \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   --===========================================================================\n"
   "   -- used during 'Mark' mode. Phantoms are marked with Attribute.Phantom = 'Yes'\n"
   "   function CleanUpMark( objects )                                              \n"
   "      for i, o in ipairs( objects ) do                                          \n"
   "         if o.Class == PHANTOM then                                             \n"
   "            o.Attribute.Phantom = 'Yes'                                         \n"
   "         else                                                                   \n"
   "            o.Attribute.Phantom = 'No'                                          \n"
   "         end                                                                    \n"
   "         o.Attribute.Class = nil                                                \n"
   "      end                                                                       \n"
   "      return objects                                                            \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   --===========================================================================\n"
   "   -- forwards the call to the right function depending on the mode,            \n"
   "   -- debug does nothing                                                        \n"
   "   function CleanUpObjects( objects )                                           \n"
   "      if mode == 'Delete' then                                                  \n"
   "         return CleanUpDelete( objects )                                        \n"
   "      elseif mode == 'Mark' then                                                \n"
   "         return CleanUpMark( objects )                                          \n"
   "      end                                                                       \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   --===========================================================================\n"
   "   -- deletes samples which seem to be more then once in the current list       \n"
   "   function CleanUpSamples( samples, objects )                                  \n"
   "      local remain = {}                                                         \n"
   "      comp = function( a, b ) return priority[a.Class] > priority[b.Class] end  \n"
   "                                                                                \n"
   "      for l, s in ipairs( samples ) do                                          \n"
   "         if #s.Matches == 0 and s.Memory > 0 then                               \n"
   "            table.insert( remain, s )                                           \n"
   "         end                                                                    \n"
   "      end                                                                       \n"
   "                                                                                \n"
   "      for i, o in ipairs( objects ) do                                          \n"
   "         table.sort( o.Matches, comp )                                          \n"
   "                                                                                \n"
   "         for l, s in ipairs( o.Matches ) do                                     \n"
   "            if s.Memory > 0 then                                                \n"
   "               s.Matches = {}                                                   \n"
   "               table.insert( remain, s )                                        \n"
   "               if s.Class ~= UNKNOWN then break end                             \n"
   "            end                                                                 \n"
   "         end                                                                    \n"
   "      end                                                                       \n"
   "                                                                                \n"
   "      return remain                                                             \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   --===========================================================================\n"
   "   -- finds all references samples have with objects                            \n"
   "   function Match( objects, samples )                                           \n"
   "      for k, o in ipairs( objects ) do                                          \n"
   "         o.Enroll()                                                             \n"
   "         o.Matches = {}                                                         \n"
   "                                                                                \n"
   "         for l, s in ipairs( samples ) do                                       \n"
   "            local so, sm = s.Verify()                                           \n"
   "                                                                                \n"
   "            if sm and sm > minMatch then                                        \n"
   "               table.insert( o.Matches, s )                                     \n"
   "               table.insert( s.Matches, o )                                     \n"
   "            end                                                                 \n"
   "         end                                                                    \n"
   "      end                                                                       \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   --===========================================================================\n"
   "   -- converts an object into an sample copying some features of the object     \n"
   "   function Sample( o )                                                         \n"
   "      local s   = o.Sample()                                                    \n"
   "      s.Origin  = o.Region                                                      \n"
   "      s.Memory  = memoryLength                                                  \n"
   "      s.Toggles = 0                                                             \n"
   "      s.Visible = true                                                          \n"
   "      s.Matches = {}                                                            \n"
   "      s.Class   = UNKNOWN                                                       \n"
   "      if mode == 'Debug' then s.Region  = o.Region end                          \n"
   "                                                                                \n"
   "      return s                                                                  \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "                                                                                \n"
   "   --===========================================================================\n"
   "   -- classifies the samples into UNKNOWN, FACE or PHANTOM. This is the heart of\n"
   "   -- this heuritsic.                                                           \n"
   "   function UpdateSamples( samples, interval )                                  \n"
   "      for l, s in ipairs( samples ) do                                          \n"
   "         local isOne = #s.Matches == 1                                          \n"
   "         local o     = s.Matches[1]                                             \n"
   "                                                                                \n"
   "         if isOne and s.Class ~= PHANTOM then                                   \n"
   "            o.Enroll()                                                          \n"
   "            s.Update()                                                          \n"
   "            if mode == 'Debug' then s.Region = o.Region end                     \n"
   "         end                                                                    \n"
   "                                                                                \n"
   "         s.Memory = isOne and memoryLength or s.Memory - interval               \n"
   "                                                                                \n"
   "         if #s.Matches <= 1 and s.Class == UNKNOWN then                         \n"
   "                                                                                \n"
   "            if isOne ~= s.Visible then                                          \n"
   "               s.Visible = not s.Visible                                        \n"
   "               s.Toggles = s.Toggles + 1                                        \n"
   "                                                                                \n"
   "               if s.Toggles > phantomToggle then s.Class = PHANTOM end          \n"
   "            end                                                                 \n"
   "                                                                                \n"
   "            if isOne and ( o.Rating.Score and o.Rating.Score > thresholdScore or \n"
   "                           CalcOverlap( s.Origin, o.Region ) < velOverlap ) then\n"
   "               s.Class = FACE                                                   \n"
   ) + std::string(
   "            end                                                                 \n"
   "         end                                                                    \n"
   "      end                                                                       \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   --===========================================================================\n"
   "   -- DEBUG FUNCTIONS                                                           \n"
   "   --===========================================================================\n"
   "   -- colorize the objects in debug mode                                        \n"
   "   function MarkObjects( objects )                                              \n"
   "      for k, o in ipairs( objects ) do                                          \n"
   "                                                                                \n"
   "         local rc = '0, 0, 255'                                                 \n"
   "         if o.Class == FACE then                                                \n"
   "            rc = '0, 255, 0'                                                    \n"
   "         elseif o.Class == PHANTOM then                                         \n"
   "            rc = '0, 0, 0'                                                      \n"
   "         end                                                                    \n"
   "                                                                                \n"
   "         o.Attribute._RegionColor = rc                                          \n"
   "      end                                                                       \n"
   "   end                                                                          \n"
   "   --===========================================================================\n"
   "   -- converts a Sample into an Object in debug mode, so we can see the samples \n"
   "   function Object( s )                                                         \n"
   "                                                                                \n"
   "      return {                                                                  \n"
   "         Type      = \"Patch\",                                                 \n"
   "         Region    = s.Region,                                                  \n"
   "         Class     = s.Class,                                                   \n"
   "         Marker    = {},                                                        \n"
   "         Attribute = {                                                          \n"
   "            _AttributeDisplay_Toggles = \"On\",                                 \n"
   "            _AttributeDisplay_Memory  = \"On\",                                 \n"
   "            _AttributeDisplay_Class   = \"On\",                                 \n"
   "            Toggles = s.Toggles,                                                \n"
   "            Memory  = s.Memory,                                                 \n"
   "            Class   = tostring( s.Class ),                                      \n"
   "            Matches = #s.Matches,                                               \n"
   "         },                                                                     \n"
   "         Rating = {},                                                           \n"
   "         Part   = {},                                                           \n"
   "      }                                                                         \n"
   "   end                                                                          \n"
   "   --===========================================================================\n"
   "   -- adds the samples to the object, so that we can see them in Debug mode     \n"
   "   function ShowSamples( samples, objects )                                     \n"
   "      for l, s in ipairs( samples ) do                                          \n"
   "         if s.Memory < memoryLength then                                        \n"
   "            table.insert( objects, Object( s ) )                                \n"
   "         end                                                                    \n"
   "      end                                                                       \n"
   "   end                                                                          \n"
   "   --===========================================================================\n"
   "   --     DEBUG END                                                             \n"
   "   --===========================================================================\n"
   "                                                                                \n"
   "                                                                                \n"
   "   --===========================================================================\n"
   "   -- this function is called by the cpp phantomTrap module                     \n"
   "   return function( objects, interval )                                         \n"
   "                                                                                \n"
   "      Match( objects, samples )                                                 \n"
   "      UpdateSamples( samples, interval )                                        \n"
   "                                                                                \n"
   "      ClassifyObjects( objects )                                                \n"
   "      samples = CleanUpSamples( samples, objects )                              \n"
   "                                                                                \n"
   "      AddNewSamples( objects, samples )                                         \n"
   "                                                                                \n"
   "      if mode == 'Debug' then                                                   \n"
   "         ShowSamples( samples, objects )                                        \n"
   "         MarkObjects( objects )                                                 \n"
   "      else                                                                      \n"
   "         objects = CleanUpObjects( objects )                                    \n"
   "      end                                                                       \n"
   "                                                                                \n"
   "      return objects                                                            \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   ]] -- heuristic end                                                          \n"
   "   --===========================================================================\n"
   "                                                                                \n"
   "   heuristic = string.gsub( heuristic, '$Mode', mode )                          \n"
   "                                                                                \n"
   "   engine:AddPhantomTrap(                                                       \n"
   "      selector,                                                                 \n"
   "      timebase,                                                                 \n"
   "      updateTimeBase,                                                           \n"
   "      minOverlap,                                                               \n"
   "      modelName,                                                                \n"
   "      patchCount,                                                               \n"
   "      heuristic                                                                 \n"
   "   )                                                                            \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddObjectTracker( engine, timeBase, updateTimeBase, modelType )        \n"
   "   local objectSelector = ModelType[modelType].ObjectSelector                   \n"
   "                                                                                \n"
   "   -- Select only objects that have a tracking score                            \n"
   "   local trackingSelector = \"Object.Rating.Tracking ~= nil\"                   \n"
   "                                                                                \n"
   "   -- Model for tracking                                                        \n"
   "   local trackingModel = \"Tracking_36x36_2008_08_21_110315\"                   \n"
   "                                                                                \n"
   "   -- Tracker parameters                                                        \n"
   "   local maxDeltaX     = 0.5                                                    \n"
   "   local maxDeltaY     = 0.5                                                    \n"
   "   local maxDeltaSize  = 0.3                                                    \n"
   "   local scaleFactor   = 0.05                                                   \n"
   "   local scoreKey      = \"Tracking\"                                           \n"
   "   local minScore      = -10                                                    \n"
   "   local templateKey   = \"Template\"                                           \n"
   "   local maxTemplates  = 3                                                      \n"
   "   local minSize       = 24 * 24                                                \n"
   "                                                                                \n"
   "   -- Quite complex tracking activator to avoid false tracking                  \n"
   "   local activator = ModelType[modelType].TrackingActivator                     \n"
   "                                                                                \n"
   "   -- Additional video parameters                                               \n"
   "   local minTrackOverlap = 0.2                                                  \n"
   "   local filterLength    = 0.3                                                  \n"
   "                                                                                \n"
   "   -- Ask for this model, maybe it can be load from file                        \n"
   "   RequireModel( trackingModel )                                                \n"
   "                                                                                \n"
   "   engine:AddObjectTracker(                                                     \n"
   "      objectSelector,      -- Object selector                                   \n"
   "      minTrackOverlap,     -- min overlap                                       \n"
   "      activator,           -- tracking activator                                \n"
   "      maxDeltaX,           -- max delta-x                                       \n"
   "      maxDeltaY,           -- max delta-y                                       \n"
   "      maxDeltaSize,        -- max delta size                                    \n"
   "      scaleFactor,         -- scale factor for size tracking                    \n"
   "      trackingModel,       -- the model                                         \n"
   "      scoreKey,            -- tracking score key                                \n"
   "      minScore,            -- min tracking score (about [-50:50])               \n"
   "      templateKey,         -- template count key                                \n"
   "      maxTemplates,        -- max number of tracking templates                  \n"
   "      minSize              -- min tracking size                                 \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Normalize the tracking score to [0,100]                                   \n"
   "   engine:AddRatingModifier(                                                    \n"
   "      trackingSelector,                                                         \n"
   "      scoreKey,                                                                 \n"
   "      -3, 130,                                                                  \n"
   "      0,  100,                                                                  \n"
   "      true                                                                      \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Calculate the new tracking score, depending on the number of templates.   \n"
   "   engine:AddObjectAccess(                                                      \n"
   "      trackingSelector,                                                         \n"
   "      [[                                                                        \n"
   "         tracking     = Object.Rating.]] .. scoreKey    .. [[                   \n"
   "         templates    = Object.Rating.]] .. templateKey .. [[                   \n"
   "         maxTemplates = ]] .. tostring( maxTemplates )  .. [[                   \n"
   "         maxTracking  = 100                                                     \n"
   "                                                                                \n"
   "         Object.Rating.]] .. templateKey .. [[ = nil                            \n"
   "         Object.Rating.]] .. scoreKey    .. [[ =                                \n"
   "            ((maxTemplates - templates) * maxTracking + tracking) / maxTemplates\n"
   "                                                                                \n"
   "         Object.Rating.Score       = nil                                        \n"
   "         Object.Attribute.Rotation = nil                                        \n"
   "         Object.Attribute.Roll     = nil                                        \n"
   "         Object.Attribute.Pitch    = nil                                        \n"
   "         Object.Attribute.Yaw      = nil                                        \n"
   "      ]]                                                                        \n"
   "   )                                                                            \n"
   "                                                                                \n"
   "   -- Filter the tracking score                                                 \n"
   "   engine:AddRatingFilter(                                                      \n"
   "      trackingSelector,                                                         \n"
   "      minTrackOverlap,                                                          \n"
   "      timeBase,                                                                 \n"
   "      updateTimeBase,                                                           \n"
   "      filterLength,                                                             \n"
   "      scoreKey                                                                  \n"
   "   )                                                                            \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddObjectId( engine,                                                   \n"
   "                      timeBase,                                                 \n"
   "                      updateTimeBase,                                           \n"
   "                      idMemoryLength,                                           \n"
   "                      idMemoryType )                                            \n"
   "   local objectSelector  = \"string.sub( Object.Type, 1, 5 ) == 'Face.'\"       \n"
   "   local minTrackOverlap = 0.2                                                  \n"
   "   local idKey           = \"Id\"                                               \n"
   "   local initialId       = 0                                                    \n"
   "   local memoryRatingKey = \"Memory\"                                           \n"
   "                                                                                \n"
   "   local idVerifier      = \"FaceFrontId_36x44_2009_08_07_122105\"              \n"
   "   local minMatch        = Config.ObjectId.MinMatch                             \n"
   "                                                                                \n"
   "   local maxViewCount    = Config.ObjectId.MaxViewCount                         \n"
   "   local viewCountKey    = \"ViewCount\"                                        \n"
   "   local gallerySizeKey  = \"GallerySize\"                                      \n"
   "                                                                                \n"
   "   if timeBase > 0 then                                                         \n"
   "      -- Don't memorize the id?                                                 \n"
   "      if idMemoryLength == 0 then                                               \n"
   "         -- Provide the objects simply with a track id                          \n"
   "         engine:AddTrackId(                                                     \n"
   "            objectSelector,                                                     \n"
   "            minTrackOverlap,                                                    \n"
   "            idKey,                                                              \n"
   "            initialId                                                           \n"
   "         )                                                                      \n"
   "      -- idMemoryLength is greater than 0!                                      \n"
   "      elseif idMemoryType == \"Spatial\" then                                   \n"
   "         -- Remember lost objects for a given time period                       \n"
   "         engine:AddObjectMemory(                                                \n"
   "            objectSelector,                                                     \n"
   "            minTrackOverlap,                                                    \n"
   "            timeBase,                                                           \n"
   "            updateTimeBase,                                                     \n"
   "            idMemoryLength,                                                     \n"
   "            memoryRatingKey                                                     \n"
   "         )                                                                      \n"
   "                                                                                \n"
   "         -- Provide the objects with a track id                                 \n"
   "         engine:AddTrackId(                                                     \n"
   "            objectSelector,                                                     \n"
   "            minTrackOverlap,                                                    \n"
   "            idKey,                                                              \n"
   "            initialId                                                           \n"
   "         )                                                                      \n"
   "                                                                                \n"
   "         -- Remove the memorized objects and the memory rating, because         \n"
   "         -- they are only used internally for id tracking                       \n"
   "         local memorySelector = objectSelector .. \" and Object.Rating.\" ..    \n"
   "            memoryRatingKey .. \" ~= nil\"                                      \n"
   "         engine:AddObjectEraser( memorySelector )                               \n"
   "                                                                                \n"
   "         engine:AddObjectAccess(                                                \n"
   "            memorySelector,                                                     \n"
   "            \"Object.Rating.\" .. memoryRatingKey .. \" = nil\"                 \n"
   "         )                                                                      \n"
   "      else                                                                      \n"
   "         RequireModel( idVerifier )                                             \n"
   "                                                                                \n"
   "         -- Provide the objects with a track id                                 \n"
   "         engine:AddTrackId(                                                     \n"
   "            objectSelector,                                                     \n"
   "            minTrackOverlap,                                                    \n"
   "            idKey,                                                              \n"
   "            initialId                                                           \n"
   "         )                                                                      \n"
   "                                                                                \n"
   "         engine:AddObjectId(                                                    \n"
   "            objectSelector,                                                     \n"
   "            timeBase,                                                           \n"
   "            updateTimeBase,                                                     \n"
   "            idVerifier,                                                         \n"
   "            minMatch,                                                           \n"
   "            idKey,                                                              \n"
   "            IdMemoryType[idMemoryType].idKey,                                   \n"
   "            IdMemoryType[idMemoryType].splitUpLinks,                            \n"
   "            IdMemoryType[idMemoryType].keepAllLinks,                            \n"
   "            idMemoryLength,                                                     \n"
   "            maxViewCount,                                                       \n"
   "            viewCountKey,                                                       \n"
   "            gallerySizeKey                                                      \n"
   "         )                                                                      \n"
   "      end                                                                       \n"
   "   end                                                                          \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function AddAnalyzer( engine,                                                   \n"
   "                      timeBase,                                                 \n"
   "                      updateTimeBase,                                           \n"
   "                      modelName,                                                \n"
   "                      selector,                                                 \n"
   "                      identifier,                                               \n"
   "                      filterLength,                                             \n"
   "                      stabilizerThreshold,                                      \n"
   "                      ratingBoundA,                                             \n"
   "                      ratingBoundB,                                             \n"
   "                      minShift,                                                 \n"
   "                      maxShift )                                                \n"
   "                                                                                \n"
   "   -- Make sure the config parameters are valid!                                \n"
   "   if minShift - maxShift >= 1 then                                             \n"
   "      error( \"invalid minShift or maxShift configuration for \" .. identifier )\n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   local range = ratingBoundB - ratingBoundA                                    \n"
   "                                                                                \n"
   "   -- Source and target range for analyzer ratings                              \n"
   "   local modifierSourceA = ratingBoundA + minShift * range                      \n"
   "   local modifierSourceB = ratingBoundB + maxShift * range                      \n"
   "   local modifierTargetA = 0                                                    \n"
   "   local modifierTargetB = 100                                                  \n"
   "                                                                                \n"
   "   -- Additional video parameters                                               \n"
   "   local minTrackOverlap    = 0.2                                               \n"
   "                                                                                \n"
   "   -- For clarification name the intended use of identifier                     \n"
   "   local scoreKey           = identifier                                        \n"
   "                                                                                \n"
   "   -- Ask for this model, maybe it can be load from file                        \n"
   "   RequireModel( modelName )                                                    \n"
   "                                                                                \n"
   "   -- Add the basic classification step                                         \n"
   "   engine:AddAnalyzer( selector, modelName )                                    \n"
   "                                                                                \n"
   "   -- Video mode?                                                               \n"
   "   if timeBase > 0.0 then                                                       \n"
   "      -- In the video mode do a simple filtering over time, stablize the        \n"
   "      -- rating and map it to the provided targetA - targetB interval.          \n"
   "      engine:AddRatingFilter(                                                   \n"
   "         selector,                                                              \n"
   "         minTrackOverlap,                                                       \n"
   "         timeBase,                                                              \n"
   "         updateTimeBase,                                                        \n"
   "         filterLength,                                                          \n"
   "         scoreKey                                                               \n"
   "      )                                                                         \n"
   "                                                                                \n"
   "      -- Get the threshold for the stabilization                                \n"
   "      threshold = math.abs( stabilizerThreshold *                               \n"
   "                            ( modifierSourceA - modifierSourceB ) )             \n"
   "                                                                                \n"
   "      -- Stablize the rating                                                    \n"
   "      engine:AddRatingStabilizer(                                               \n"
   "         selector,                                                              \n"
   "         minTrackOverlap,                                                       \n"
   "         scoreKey,                                                              \n"
   "         threshold                                                              \n"
   "      )                                                                         \n"
   "   end                                                                          \n"
   "                                                                                \n"
   "   -- Map the rating to provied target                                          \n"
   "   engine:AddRatingModifier(                                                    \n"
   "      selector,                                                                 \n"
   "      scoreKey,                                                                 \n"
   "      modifierSourceA, modifierSourceB,                                         \n"
   "      modifierTargetA, modifierTargetB,                                         \n"
   "      true -- Do clipping?                                                      \n"
   "   )                                                                            \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
   "--==============================================================================\n"
   "function RequireModel( modelName )                                              \n"
   "   -- Check for a registered model                                              \n"
   "   if CheckModel( modelName ) == false then                                     \n"
   "      -- If the check fails, we try to load a ctm-file.                         \n"
   "      local file = io.open( modelName .. \".ctm\", \"rb\" )                     \n"
   "                                                                                \n"
   "      -- If the loading failed, we try it in the dir \"Model\"                  \n"
   "      if file == nil then                                                       \n"
   "         file = io.open( \"Model/\" .. modelName .. \".ctm\", \"rb\" )          \n"
   "      end                                                                       \n"
   "                                                                                \n"
   "      if file ~= nil then                                                       \n"
   "         local model = file:read( \"*a\" )                                      \n"
   "         RegisterModel( modelName, model )                                      \n"
   "         CacheModel( modelName )                                                \n"
   "      end                                                                       \n"
   "   end                                                                          \n"
   "end                                                                             \n"
   "                                                                                \n"
   "                                                                                \n"
#ifdef SHORE_DEMO
   "demo = true                                                                     \n"
#else
   "demo = nil                                                                      \n"
#endif
   );

   std::stringstream setupCall;

   setupCall << std::boolalpha
             << "CreateFaceEngine("
             <<        timeBase                << ","
             <<        updateTimeBase          << ","
             <<        threadCount             << ","
             << "'" << modelType        << "'" << ","
             <<        imageScale              << ","
             <<        minFaceSize             << ","
             <<        minFaceScore            << ","
             <<        idMemoryLength          << ","
             << "'" << idMemoryType     << "'" << ","
             <<        trackFaces              << ","
             << "'" << phantomTrap      << "'" << ","
             <<        searchEyes              << ","
             <<        searchNose              << ","
             <<        searchMouth             << ","
             <<        analyzeEyes             << ","
             <<        analyzeMouth            << ","
             <<        analyzeGender           << ","
             <<        analyzeAge              << ","
             <<        analyzeHappy            << ","
             <<        analyzeSad              << ","
             <<        analyzeSurprised        << ","
             <<        analyzeAngry            << ","
             << "'" << gallery          << "'" << ")";

   return Shore::CreateEngine( setupScript.c_str(),
                               setupCall.str().c_str() );
};


} // namespace Shore


