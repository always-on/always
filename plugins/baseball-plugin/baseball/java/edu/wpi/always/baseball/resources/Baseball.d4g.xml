<?xml version="1.0" encoding="utf-8"?>
<model about="urn:disco.wpi.edu:models:Baseball" 
       xmlns="http://www.cs.wpi.edu/~rich/d4g" 
       xmlns:t="http://www.cs.wpi.edu/~rich/cetask/cea-2018-ext">

  <!-- CR: I find it helpful to organize files in depth-first order.

       Also, note underscores below make tasks internal to change default
       key values for plugin generation to false.  

       General comment: One way to think about the authoring strategy here is that
       by expressing the overall structure of the dialogue using tasks, we are letting
       Disco handle the automatic and flexible generation of the "control flow" of
       the interaction, with the "content blocks" in D4g dialogue trees.
   -->

  <agent id="_Baseball" text="What is your favorite baseball team?">
    <user text="The Yankees." 
          eval="preferredTeam = 'Yankees' ">
      <do task="_DiscussLastGame"/>
    </user>
    <user text="The Red Sox." 
          eval="preferredTeam = 'Yankees' ">  <!-- change this when season starts again -->
      <do task="_SmartRemark"/>
    </user>
  </agent>  
  
  <!-- _DiscussLastGame has been rewritten more logically as a decomposition choice
       with an optional step in second decomposition. See ChuckTestExample1 and
       Baseball.properties -->

  <t:task id="_DiscussLastGame"> 
    <t:subtasks id="sawGame" >
      <t:step name="saw" task="_Baseball_Saw_Game" />
    </t:subtasks>
    <t:subtasks id="didnt">
      <t:step name="recap" task="_GetRecap" minOccurs="0"/>
    </t:subtasks>
  </t:task>

  <agent id="_Baseball_Saw_Game" text="What did you think of it?" 
         eval="talkedAboutLG=true;">
    <user text="It was a good game.">
      <agent text="I thought it was very good too. {typeOfGameString}">
      </agent>
    </user>
    <user text="Awesome game!">
      <agent text="Yeh, it was very intense.  Great game. {typeOfGameString}">
        <user text="yeh.">
        </user>		
      </agent>
    </user>
    <user text="It was boring.">
    </user>
    <user text="We needed that win.">
      <agent text=" {weNeededThatWinResponse} ">
        <user text="Yeh, I agree." applicable="seasonType == 2">
        </user>
        <user text="I think we can win even without that." applicable="seasonType == 2">
        </user>
        <user text="Yeh, I agree." applicable="seasonType != 2">
        </user>
      </agent>
    </user>
  </agent>

  <agent id="_GetRecap" text="{parser.getRecap(game1)}">
    <user text="Thanks for telling me that!">
      <agent text="I live to serve you HA HA"/>
    </user>
    <user text="Well, that's pretty good news!">
      <agent text="Yeh, it sure is!" />
    </user>
    <user text="well, maybe they'll do better next time.">
      <agent text="I sure hope so."/>
    </user>
  </agent>

  <agent id="_SmartRemark" text="Really?  But they aren't so great at winning the World Series!">
    <user text="I bet you are a Yankees Fan.">
    </user>
    <user text="Ah, but who cares?  They play great ball!">
    </user>
  </agent>
  
 <t:script init="true"> 

    // If mode is 1, it is OFFLINE. If mode is 0, it is ONLINE -->
    var mode = 1;
    
    var parser = new Packages.edu.wpi.always.baseball.Parser(mode);
    var aStandingsParser = new Packages.edu.wpi.always.baseball.standings.StandingsParser(mode);
    
    var lastGame = parser.getOneOfTheLastGames(1);
    var System = java.lang.System;
    var timeSinceLastGame = lastGame.timeSinceLastGame;
    var lastGameDate = lastGame.gameDate;
    
    // seasontype = 0:spring, 1:regular season, 2:playoff
    var seasonType = parser.getSeasonType();
    var yankeesSeasonIsOver = aStandingsParser.getyankeesSeason();
    
    // If time is bigger than lastGame.timeSinceLastGame, we talk about
    // last game at the start
    var time = 5;
    
    // Watching Variables
    var typeOfGameString = Packages.edu.wpi.always.baseball.recaps.GameRecapParser.getTypeOfGameString(lastGame.bosScore,lastGame.otherScore,lastGame.opposingTeam);
    var weNeededThatWinResponse = parser.getWeNeededThatWinResponseString(aStandingsParser,lastGame.bosScore,lastGame.otherScore);
    
    // Playoff Variables
    var playoffsOption0Resp =  parser.getPlayoffsResponse(aStandingsParser,0);
    var playoffsOption1Resp =  parser.getPlayoffsResponse(aStandingsParser,1);
    var playoffsOption2Resp =  parser.getPlayoffsResponse(aStandingsParser,2);
    
    // Standings Variables
    var redSoxStandingsString = aStandingsParser.getNYYStandingsString();
    
    // Recaps variables 
    var game1 = lastGame;
    var game2 = parser.getOneOfTheLastGames(2);
    var game3 = parser.getOneOfTheLastGames(3);
    var game4 = parser.getOneOfTheLastGames(4);
    var game1_end = false;
    var game2_end = false;
    var game3_end = false;
    var game4_end = false;
    
    // News Variables
    var newsArticleIndex = -1;
    var newsParser = new Packages.edu.wpi.always.baseball.news.RecentNewsParser(mode);
    
    // Playoff Standings Variables
    var showSeasonType = aStandingsParser.getShowSeasonType_xml();
    var DSwithGeneral = aStandingsParser.getDSwithGeneral_xml();
    var LCwithGeneral = aStandingsParser.getLCwithGeneral_xml();
    var WSwithGeneral = aStandingsParser.getWSwithGeneral_xml();
    var playoffswithYankees = aStandingsParser.getPlayoffswithYankees_xml();
    
    var DS_flag = false;
    var LC_flag = false;
    var WS_flag = false;
    var preferredTeam;
    
    var talkedAboutLG = false;
  </t:script>

</model>